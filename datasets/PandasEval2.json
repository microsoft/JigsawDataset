{
  "0": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Rename column 'a' to 'Person Name' and column 'b' to 'Credit' in dfin and assign to dfout",
            "user": "u20"
          },
          {
            "query": "Given a dataframe dfin, rename the column 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u18"
          },
          {
            "query": "Change column name 'a' to 'Person Name' and column name 'b' to 'Credit'",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'Credit': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'b': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'Credit': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "rename column 'a' to 'Person Name' and column 'b' to 'Credit' in input dataframe 'dfin'",
            "user": "u12"
          },
          {
            "query": "rename column 'a' to 'Person Name' and column 'b' to 'Credit'",
            "user": "u12"
          },
          {
            "query": "Rename 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u6"
          },
          {
            "query": "rename column 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u21"
          },
          {
            "query": "rename only column 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u21"
          },
          {
            "query": "Change column names from 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u13"
          },
          {
            "query": "change 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u0"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'Credit': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'b': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'Credit': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Rename column 'a' to 'Person Name' and column 'b' to 'Credit'",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'Credit': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'b': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'Credit': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "Rename column 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u10"
          },
          {
            "query": "Rename column a to 'Person Name' and b to 'Credit'",
            "user": "u17"
          },
          {
            "query": "Rename column 'a' to 'Person Name' and 'b' to 'Credit', and keep the rest same",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'Credit': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'b': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'Credit': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "rename 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u14"
          },
          {
            "query": "Chang column 'a' to 'Person Name' and 'b' to 'Credit'",
            "user": "u19"
          },
          {
            "query": "change column one name of dfin to 'Person Name'",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'Credit': {0: 100, 1: 200, 2: 300, 3: 400, 4: 500}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'b': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})"
            ],
            "output": "pd.DataFrame({'Person Name': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter', 5: None}, 'Credit': {0: 100.0, 1: 200.0, 2: 300.0, 3: 400.0, 4: 500.0, 5: None}, 'c': {0: None, 1: 2.0, 2: 3.0, 3: 5.0, 4: None, 5: 6.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})"
        ]
      }
    }
  },
  "1": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Filter rows where value1 is divisible by 3 in dfin and assign to dfout",
            "user": "u20"
          },
          {
            "query": "Filter rows in which the column named 'value1' is a multiple of 3",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, select all rows where 'value1' is divisible by 3",
            "user": "u18"
          },
          {
            "query": "Filter rows where 'value1' is divisible by 3",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'value1': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78}, 'value2': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4}})"
            ],
            "output": "pd.DataFrame({'value1': {0: 84, 2: 33, 5: 78}, 'value2': {0: -1, 2: 2, 5: -4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'value1': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 13, 7: 2, 8: 3}, 'value2': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 3, 7: 5, 8: 5}})"
            ],
            "output": "pd.DataFrame({'value1': {0: 84, 2: 33, 5: 78, 8: 3}, 'value2': {0: -1, 2: 2, 5: -4, 8: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[dfin['value1']%3==0]",
          "dfout = dfin[dfin['value1']%3==0]"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "filter rows where column 'A' modulus 4 equals 1",
            "user": "u12"
          },
          {
            "query": "Filter rows of column A whose values % 4 give 1",
            "user": "u6"
          },
          {
            "query": "Keep row if value in column A divided by 4 gives a remainder 1",
            "user": "u21"
          },
          {
            "query": "Choose rows such that x%4=1 in column A",
            "user": "u13"
          },
          {
            "query": "Choose rows such that A%4=1 in column A",
            "user": "u13"
          },
          {
            "query": "'Get rows with column 'A' leaving remainder 1 when divided by 4",
            "user": "u15"
          },
          {
            "query": "drop rows where 'A' mod 4 is not 1",
            "user": "u0"
          },
          {
            "query": "select rows where column 'A' modulus 4 is equal to 1",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78}, 'B': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4}})"
            ],
            "output": "pd.DataFrame({'A': {2: 33, 3: 41, 4: 49}, 'B': {2: 2, 3: 3, 4: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 90, 7: 161}, 'B': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 1, 7: 2}})"
            ],
            "output": "pd.DataFrame({'A': {2: 33, 3: 41, 4: 49, 7: 161}, 'B': {2: 2, 3: 3, 4: 4, 7: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[dfin['A']%4==1]",
          "dfout = dfin[dfin['A']%4==1]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Get rows from dfin where 'column1' is even",
            "user": "u1"
          },
          {
            "query": "get rows whose column1 is divisible by 2",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'column1': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78}, 'column2': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4}})"
            ],
            "output": "pd.DataFrame({'column1': {0: 84, 1: 22, 5: 78}, 'column2': {0: -1, 1: -2, 5: -4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'column1': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 13, 7: 2, 8: 3}, 'column2': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 3, 7: 5, 8: 5}})"
            ],
            "output": "pd.DataFrame({'column1': {0: 84, 1: 22, 5: 78, 7: 2}, 'column2': {0: -1, 1: -2, 5: -4, 7: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[dfin['column1']%2==0]",
          "dfout = dfin[dfin['column1']%2==0]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "select rows of cells where column'colA' mod 5 is 0",
            "user": "u4"
          },
          {
            "query": "select all rows where the entry in 'colA' is divisible by 5",
            "user": "u11"
          },
          {
            "query": "Remove rows where colA is not a multiple of 5",
            "user": "u10"
          },
          {
            "query": "filter rows where colA is not a multiple of 5",
            "user": "u10"
          },
          {
            "query": "filter rows where colA is a multiple of 5",
            "user": "u10"
          },
          {
            "query": "Filter rows from dfin such that colA is divisible by 5",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 45, 1: 33, 2: 78, 3: 15, 4: 90, 5: 18}, 'colB': {0: -1, 1: -2, 2: 2, 3: 3, 4: -4, 5: 4}})"
            ],
            "output": "pd.DataFrame({'colA': {0: 45, 3: 15, 4: 90}, 'colB': {0: -1, 3: 3, 4: -4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 45, 1: 33, 2: 78, 3: 15, 4: 90, 5: 18, 6: 8, 7: 9, 8: 5}, 'colB': {0: -1, 1: -2, 2: 2, 3: 3, 4: -4, 5: 4, 6: 11, 7: 11, 8: 33}})"
            ],
            "output": "pd.DataFrame({'colA': {0: 45, 3: 15, 4: 90, 8: 5}, 'colB': {0: -1, 3: 3, 4: -4, 8: 33}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[dfin['colA']%5==0]",
          "dfout = dfin[dfin['colA']%5==0]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "Retain those rows where value in cell of column 'A' gives remainder 1 when divided by 4",
            "user": "u5"
          },
          {
            "query": "print rows where A%4 = 1",
            "user": "u14"
          },
          {
            "query": "drop rows if 'A'%4 != 1",
            "user": "u16"
          },
          {
            "query": "select rows where 'A'%4 == 1",
            "user": "u16"
          },
          {
            "query": "select rows where A%4 == 1",
            "user": "u16"
          },
          {
            "query": "rows where A%4 == 1",
            "user": "u16"
          },
          {
            "query": "filter rows where A%4 == 1",
            "user": "u16"
          },
          {
            "query": "select all rows from dfin such that column A mod 4 = 1",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78}, 'B': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4}})"
            ],
            "output": "pd.DataFrame({'A': {2: 33, 3: 41, 4: 49}, 'B': {2: 2, 3: 3, 4: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 84, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 90, 7: 161}, 'B': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 1, 7: 2}})"
            ],
            "output": "pd.DataFrame({'A': {2: 33, 3: 41, 4: 49, 7: 161}, 'B': {2: 2, 3: 3, 4: 4, 7: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[dfin['A']%4==1]",
          "dfout = dfin[dfin['A']%4==1]"
        ]
      }
    }
  },
  "2": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Concatenate dfin 3 times and assign to dfout",
            "user": "u20"
          },
          {
            "query": "Repeat the rows of dfin thrice",
            "user": "u9"
          },
          {
            "query": "Copy the rows of dfin thrice",
            "user": "u9"
          },
          {
            "query": "Concatenate the rows of dfin thrice",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, concantenate it three times to get a new dataframe dfout",
            "user": "u18"
          },
          {
            "query": "Append dataframe to itself twice",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})"
            ],
            "output": "pd.DataFrame([{'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}], index=[0, 1, 0, 1, 0, 1])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}})"
            ],
            "output": "pd.DataFrame([{'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}], index=[0, 1, 2, 0, 1, 2, 0, 1, 2])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = pd.concat([dfin, dfin, dfin])",
          "dfout = pd.concat([dfin, dfin, dfin], axis=0)"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "duplicate all rows 4 times",
            "user": "u12"
          },
          {
            "query": "repeat all rows of the dataframe 4 times",
            "user": "u12"
          },
          {
            "query": "concatenate the input dataframe 'dfin' 4 times",
            "user": "u12"
          },
          {
            "query": "Repeat table 4 times",
            "user": "u6"
          },
          {
            "query": "duplicate and append input dataframe 4 times",
            "user": "u21"
          },
          {
            "query": "duplicate and append 4 times",
            "user": "u21"
          },
          {
            "query": "Duplicate 4 times",
            "user": "u13"
          },
          {
            "query": "Repeat 4 times",
            "user": "u13"
          },
          {
            "query": "Repeat dataframe 4 times",
            "user": "u13"
          },
          {
            "query": "Replicate dataframe 3 times",
            "user": "u15"
          },
          {
            "query": "duplicate all rows 3 times",
            "user": "u0"
          },
          {
            "query": "repeat all entries in dfin four times",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})"
            ],
            "output": "pd.DataFrame([{'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}], index=[0, 1, 0, 1, 0, 1, 0, 1])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}})"
            ],
            "output": "pd.DataFrame([{'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}], index=[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = pd.concat([dfin, dfin, dfin, dfin])",
          "dfout = pd.concat([dfin, dfin, dfin, dfin], axis=0)"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Duplicate rows of dfin once",
            "user": "u1"
          },
          {
            "query": "Repeat rows of dfin once",
            "user": "u1"
          },
          {
            "query": "Repeat rows of dfin",
            "user": "u1"
          },
          {
            "query": "Repeat dataframe dfin",
            "user": "u1"
          },
          {
            "query": "Append dfin to itself",
            "user": "u1"
          },
          {
            "query": "Append dfin to dfin",
            "user": "u1"
          },
          {
            "query": "duplicate rows",
            "user": "u7"
          },
          {
            "query": "copy rows",
            "user": "u7"
          },
          {
            "query": "copy and append rows",
            "user": "u7"
          },
          {
            "query": "copy and append rows and reset index",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})"
            ],
            "output": "pd.DataFrame([{'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}], index=[0, 1, 0, 1])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}})"
            ],
            "output": "pd.DataFrame([{'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}], index=[0, 1, 2, 0, 1, 2])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = pd.concat([dfin, dfin])",
          "dfout = pd.concat([dfin, dfin], axis=0)",
          "dfout = dfin.append(dfin)"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "replicate the columns thrice",
            "user": "u4"
          },
          {
            "query": "Replicate the columns thrice",
            "user": "u4"
          },
          {
            "query": "replicate the rows teice",
            "user": "u4"
          },
          {
            "query": "replicate the rows twice",
            "user": "u4"
          },
          {
            "query": "repeat rows twice",
            "user": "u4"
          },
          {
            "query": "add rows with same values as existing rows",
            "user": "u4"
          },
          {
            "query": "concatenate dfin to itself thrice",
            "user": "u11"
          },
          {
            "query": "concatenate dfin vertically to itself thrice",
            "user": "u11"
          },
          {
            "query": "Append dfin to dfin 3 times",
            "user": "u17"
          },
          {
            "query": "Append dfin to dfin, then append dfin to it",
            "user": "u17"
          },
          {
            "query": "Concatenate dfin to dfin 3 times",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})"
            ],
            "output": "pd.DataFrame([{'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}], index=[0, 1, 0, 1, 0, 1])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}})"
            ],
            "output": "pd.DataFrame([{'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}], index=[0, 1, 2, 0, 1, 2, 0, 1, 2])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = pd.concat([dfin, dfin, dfin])",
          "dfout = pd.concat([dfin, dfin, dfin], axis=0)"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "repeat the rows 4 times",
            "user": "u5"
          },
          {
            "query": "repeat all rows 4 times",
            "user": "u5"
          },
          {
            "query": "repeat the dataframe 4 times",
            "user": "u5"
          },
          {
            "query": "repeat rows 4 times",
            "user": "u14"
          },
          {
            "query": "repeat all rows of input 4 times",
            "user": "u14"
          },
          {
            "query": "dublicate rows 4 times",
            "user": "u14"
          },
          {
            "query": "dublicate table 4 times",
            "user": "u14"
          },
          {
            "query": "repeat inserting rows 4 times",
            "user": "u14"
          },
          {
            "query": "concat rows 4 times",
            "user": "u14"
          },
          {
            "query": "concat dfin*4",
            "user": "u14"
          },
          {
            "query": "concat row 0, row 1 4 times",
            "user": "u14"
          },
          {
            "query": "concat rows of dfin 4 times",
            "user": "u14"
          },
          {
            "query": "output is copy of input 4 times at axis=0",
            "user": "u19"
          },
          {
            "query": "Duplicate the rows 4 times",
            "user": "u16"
          },
          {
            "query": "Multiply the rows 4 times",
            "user": "u16"
          },
          {
            "query": "Duplicate table 4 times",
            "user": "u16"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})"
            ],
            "output": "pd.DataFrame([{'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}, {'A': 22, 'B': -2}, {'A': 33, 'B': 2}], index=[0, 1, 0, 1, 0, 1, 0, 1])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 4, 2: 7}, 'B': {0: 2, 1: 5, 2: 8}, 'C': {0: 3, 1: 6, 2: 9}})"
            ],
            "output": "pd.DataFrame([{'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}, {'A': 1, 'B': 2, 'C': 3}, {'A': 4, 'B': 5, 'C': 6}, {'A': 7, 'B': 8, 'C': 9}], index=[0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2])",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = pd.concat([dfin, dfin, dfin, dfin])",
          "dfout = pd.concat([dfin, dfin, dfin, dfin], axis=0)"
        ]
      }
    }
  },
  "3": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Get fourth value from column 'C' in dfin and assign to dfout",
            "user": "u20"
          },
          {
            "query": "Get fourth value from column 'C' in dfin",
            "user": "u20"
          },
          {
            "query": "Fetch the value at row index 3 and columns 'C'",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, get the cell value at row index 3 and column 'C'",
            "user": "u18"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33, 2: 12, 3: 18}, 'B': {0: -2, 1: 2, 2: -5, 3: -12}, 'C': {0: 1, 1: 3, 2: 7, 3: 0}})"
            ],
            "output": "np.int64(0)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33, 2: 12, 3: 18, 4: 2}, 'B': {0: -2, 1: 2, 2: -5, 3: -12, 4: 4}, 'C': {0: 1, 1: 3, 2: 7, 3: 0, 4: 6}, 'testCol': {0: 3, 1: 4, 2: 5, 3: 6, 4: 7}})"
            ],
            "output": "np.int64(0)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[3, 'C']",
          "dfout = dfin.loc[3]['C']",
          "dfout = dfin['C'][3]"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "get the value in column 'colC' at row 1",
            "user": "u12"
          },
          {
            "query": "return value of 1st row and 3rd column",
            "user": "u21"
          },
          {
            "query": "return value of 1st index and ColC",
            "user": "u21"
          },
          {
            "query": "return value at (1,ColC)",
            "user": "u21"
          },
          {
            "query": "return value from ColC's 1st row",
            "user": "u21"
          },
          {
            "query": "return value at ColC's 1st index",
            "user": "u21"
          },
          {
            "query": "Get cell at row 1 column 'colC'",
            "user": "u13"
          },
          {
            "query": "Get value of column 'colC' in row 2",
            "user": "u15"
          },
          {
            "query": "Get value of column 'colC' in row 1",
            "user": "u15"
          },
          {
            "query": "get value at row '1' and column 'colC'",
            "user": "u0"
          },
          {
            "query": "return second entry of column 'colC'",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12}, 'colC': {0: 1, 1: 3, 2: 7, 3: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18, 4: 2}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12, 4: 4}, 'colC': {0: 1, 1: 3, 2: 7, 3: 0, 4: 6}, 'testCol': {0: 3, 1: 4, 2: 5, 3: 6, 4: 7}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[1, 'colC']",
          "dfout = dfin.loc[1]['colC']",
          "dfout = dfin['colC'][1]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Get the value at row '1' and column 'C' from dfin",
            "user": "u1"
          },
          {
            "query": "Get the value in the cell at row '1' and column 'C' from dfin",
            "user": "u1"
          },
          {
            "query": "Get the value in row '1' and column 'C' from dfin",
            "user": "u1"
          },
          {
            "query": "Get the value at row '1' and column 'C' from dataframe dfin",
            "user": "u1"
          },
          {
            "query": "get object at row index 1, column 'C'",
            "user": "u7"
          },
          {
            "query": "object at row index 1, column 'C'",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33, 2: 12, 3: 18}, 'B': {0: -2, 1: 2, 2: -5, 3: -12}, 'C': {0: 1, 1: 3, 2: 7, 3: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 22, 1: 33, 2: 12, 3: 18, 4: 2}, 'B': {0: -2, 1: 2, 2: -5, 3: -12, 4: 4}, 'C': {0: 1, 1: 3, 2: 7, 3: 0, 4: 6}, 'testCol': {0: 3, 1: 4, 2: 5, 3: 6, 4: 7}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[1, 'C']",
          "dfout = dfin.loc[1]['C']",
          "dfout = dfin['C'][1]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "select the cell belong to the row named '3' and column named 'colC'",
            "user": "u11"
          },
          {
            "query": "select the cell belong to the fourth row and column named 'colC'",
            "user": "u11"
          },
          {
            "query": "select the object in the cell of the fourth row belonging the column named 'colC'",
            "user": "u11"
          },
          {
            "query": "get cell value of row at index 3 and column colC",
            "user": "u10"
          },
          {
            "query": "Select index 3 from column colC",
            "user": "u17"
          },
          {
            "query": "from column colC, select index 3",
            "user": "u17"
          },
          {
            "query": "Select iloc 3 and column colC",
            "user": "u17"
          },
          {
            "query": "Select column colC with index 3",
            "user": "u17"
          },
          {
            "query": "From dfin, Select column colC with index 3",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12}, 'colC': {0: 1, 1: 3, 2: 7, 3: 0}})"
            ],
            "output": "np.int64(0)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18, 4: 2}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12, 4: 4}, 'colC': {0: 1, 1: 3, 2: 7, 3: 0, 4: 6}, 'testCol': {0: 3, 1: 4, 2: 5, 3: 6, 4: 7}})"
            ],
            "output": "np.int64(0)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[3, 'colC']",
          "dfout = dfin.loc[3]['colC']",
          "dfout = dfin['colC'][3]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "Get element in row 2 and column named 'gamma'",
            "user": "u5"
          },
          {
            "query": "return value at row 2 column 'gamma'",
            "user": "u14"
          },
          {
            "query": "return third value at column 'gamma'",
            "user": "u19"
          },
          {
            "query": "return value of row '2' and column 'gamma'",
            "user": "u16"
          },
          {
            "query": "return value of column 'gamma' and row '2'",
            "user": "u16"
          },
          {
            "query": "return cell value at (2, gamma)",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 22, 1: 33, 2: 12, 3: 18}, 'beta': {0: -2, 1: 2, 2: -5, 3: -12}, 'gamma': {0: 1, 1: 3, 2: 7, 3: 0}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 22, 1: 33, 2: 12, 3: 18, 4: 2}, 'beta': {0: -2, 1: 2, 2: -5, 3: -12, 4: 4}, 'gamma': {0: 1, 1: 3, 2: 7, 3: 0, 4: 6}, 'testCol': {0: 3, 1: 4, 2: 5, 3: 6, 4: 7}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.loc[2, 'gamma']",
          "dfout = dfin.loc[2]['gamma']",
          "dfout = dfin['gamma'][2]"
        ]
      }
    }
  },
  "4": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Filter all rows with alpha less than 40 or greater than 59 from dfin",
            "user": "u20"
          },
          {
            "query": "Filter rows in which column 'alpha' is less than 40 or greater than 59",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, select all rows where 'alpha' is lesser than 40 or greater than 59",
            "user": "u18"
          },
          {
            "query": "Filter rows where value of 'alpha' is in range '40' to '59'",
            "user": "u2"
          },
          {
            "query": "Filter rows where value of 'alpha' is not in range of '40' and '59'",
            "user": "u2"
          },
          {
            "query": "Filter rows where value of 'alpha' is less than '40' or greater than '59'",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95}, 'beta': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3}, 'gamma': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 91, 9: 54, 10: 45}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95, 8: 91}, 'beta': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3, 8: 91}, 'gamma': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6, 8: 91}, 'testCol': {0: 0, 1: 1, 2: 2, 5: 5, 6: 6, 8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]",
          "dfout = dfin.loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "filter all rows where value in column 'foo' is less than 34 or greater than 70",
            "user": "u12"
          },
          {
            "query": "Filter rows of column 'foo' lie are less than 34 or are greater than 70 of table dfin",
            "user": "u6"
          },
          {
            "query": "return rows where value for 'foo' is less than 34 and greater than 70",
            "user": "u21"
          },
          {
            "query": "Choose rows such that in column 'foo' it is less than 34 or greater than 70",
            "user": "u13"
          },
          {
            "query": "Get rows with value of column 'foo' less than 34 or greater than 70",
            "user": "u15"
          },
          {
            "query": "retain rows where 'foo' greater than 70 or 'foo' less than 34",
            "user": "u0"
          },
          {
            "query": "select entries in column 'foo' which are greater than 70 or less than 34",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95}, 'bar': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3}, 'yah': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'bar': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 91, 9: 54, 10: 45}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95, 8: 91}, 'bar': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3, 8: 91}, 'yah': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6, 8: 91}, 'testCol': {0: 0, 1: 1, 2: 2, 5: 5, 6: 6, 8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)]",
          "dfout = dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Get rows in dfin where the column 'beta' has value less than 40 or greater than 53",
            "user": "u1"
          },
          {
            "query": "get rows with beta greater than 53 or less than 40",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'gamma': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'alpha': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95}, 'gamma': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3}, 'alpha': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'gamma': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 91, 9: 54, 10: 45}, 'alpha': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95, 8: 91, 9: 54}, 'gamma': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3, 8: 91, 9: 54}, 'alpha': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6, 8: 91, 9: 54}, 'testCol': {0: 0, 1: 1, 2: 2, 5: 5, 6: 6, 8: 8, 9: 9}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[(dfin['beta'] < 36) | (dfin['beta'] > 50)]",
          "dfout = dfin.loc[(dfin['beta'] < 36) | (dfin['beta'] > 50)]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "select rows where column \"gamma\" value is less than 40 or greater than 53",
            "user": "u4"
          },
          {
            "query": "select all rows where the entry in 'gamma' is less than 40 and more than 53",
            "user": "u11"
          },
          {
            "query": "select all rows where the entry in 'gamma' is not between 40 and 53",
            "user": "u11"
          },
          {
            "query": "select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53",
            "user": "u11"
          },
          {
            "query": "select all rows where the any entry in column 'gamma' is not between 40 and 53",
            "user": "u11"
          },
          {
            "query": "filter rows where 'gamma' is less than 40 or greater than 53",
            "user": "u10"
          },
          {
            "query": "From dfin, filter rows with column gamma less than 40 or more than 53",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'alpha': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95}, 'alpha': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3}, 'beta': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'alpha': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 91, 9: 54, 10: 45}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95, 8: 91, 9: 54}, 'alpha': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3, 8: 91, 9: 54}, 'beta': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6, 8: 91, 9: 54}, 'testCol': {0: 0, 1: 1, 2: 2, 5: 5, 6: 6, 8: 8, 9: 9}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]",
          "dfout = dfin.loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "retain those rows where value in cell of column 'bar' is either less than 38 or greater than 60",
            "user": "u5"
          },
          {
            "query": "print rows where bar < 38 or bar > 60",
            "user": "u14"
          },
          {
            "query": "remove rows with value of column 'bar' between 38 and 60",
            "user": "u19"
          },
          {
            "query": "drop rows where bar>=38 and bar <=60",
            "user": "u16"
          },
          {
            "query": "filter rows where bar<38 and bar>60",
            "user": "u16"
          },
          {
            "query": "select rows from dfin such that column 'bar' is less than 38 or greater than 60",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'foo': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95}, 'foo': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3}, 'yah': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'foo': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 91, 9: 54, 10: 45}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 5: 78, 6: 95, 8: 91}, 'foo': {0: -1, 1: 3, 2: 2, 5: -4, 6: 3, 8: 91}, 'yah': {0: -1, 1: -2, 2: 2, 5: -5, 6: 6, 8: 91}, 'testCol': {0: 0, 1: 1, 2: 2, 5: 5, 6: 6, 8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)]",
          "dfout = dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)]"
        ]
      }
    }
  },
  "5": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin",
            "user": "u20"
          },
          {
            "query": "Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin",
            "user": "u20"
          },
          {
            "query": "Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3",
            "user": "u20"
          },
          {
            "query": "Select all rows with alpha less than 40 or greater than 59 with beta equal to 3",
            "user": "u20"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'alpha': {1: 22, 6: 95}, 'beta': {1: 3, 6: 3}, 'gamma': {1: -2, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 3, 9: 54, 10: 3}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'alpha': {1: 22, 6: 95, 8: 91}, 'beta': {1: 3, 6: 3, 8: 3}, 'gamma': {1: -2, 6: 6, 8: 91}, 'testCol': {1: 1, 6: 6, 8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]",
          "dfout = dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]",
          "dfout = dfin[(dfin['beta'] == 3) & ((dfin['alpha'] < 40) | (dfin['alpha'] > 59))]",
          "dfout = dfin.loc[(dfin['beta'] == 3) & ((dfin['alpha'] < 40) | (dfin['alpha'] > 59))]",
          "dfout = dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)][(dfin['beta'] == 3)]",
          "dfout = dfin.loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)][(dfin['beta'] == 3)]",
          "dfout = dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)].loc[(dfin['beta'] == 3)]",
          "dfout = dfin.loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)].loc[(dfin['beta'] == 3)]",
          "dfout = dfin[(dfin['beta'] == 3)][(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]",
          "dfout = dfin[(dfin['beta'] == 3)].loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]",
          "dfout = dfin.loc[(dfin['beta'] == 3)][(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]",
          "dfout = dfin.loc[(dfin['beta'] == 3)].loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8",
            "user": "u12"
          },
          {
            "query": "Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin",
            "user": "u6"
          },
          {
            "query": "Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin",
            "user": "u6"
          },
          {
            "query": "return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8",
            "user": "u21"
          },
          {
            "query": "return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8",
            "user": "u21"
          },
          {
            "query": "return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8",
            "user": "u21"
          },
          {
            "query": "return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8",
            "user": "u21"
          },
          {
            "query": "return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34",
            "user": "u21"
          },
          {
            "query": "return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34",
            "user": "u21"
          },
          {
            "query": "Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8",
            "user": "u13"
          },
          {
            "query": "Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8",
            "user": "u13"
          },
          {
            "query": "Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8",
            "user": "u15"
          },
          {
            "query": "retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8",
            "user": "u8"
          },
          {
            "query": "select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: 8, 5: -4, 6: 8, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'foo': {1: 22, 6: 95}, 'bar': {1: 8, 6: 8}, 'yah': {1: -2, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'bar': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 8, 9: 54, 10: 8}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'foo': {8: 91}, 'bar': {8: 8}, 'yah': {8: 91}, 'testCol': {8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]",
          "dfout = dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]",
          "dfout = dfin[(dfin['bar'] == 8) & ((dfin['foo'] < 34) | (dfin['foo'] > 70))]",
          "dfout = dfin.loc[(dfin['bar'] == 8) & ((dfin['foo'] < 34) | (dfin['foo'] > 70))]",
          "dfout = dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][(dfin['bar'] == 8)]",
          "dfout = dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)][(dfin['bar'] == 8)]",
          "dfout = dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)].loc[(dfin['bar'] == 8)]",
          "dfout = dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)].loc[(dfin['bar'] == 8)]",
          "dfout = dfin[(dfin['bar'] == 8)][(dfin['foo'] < 34) | (dfin['foo'] > 70)]",
          "dfout = dfin[(dfin['bar'] == 8)].loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)]",
          "dfout = dfin.loc[(dfin['bar'] == 8)][(dfin['foo'] < 34) | (dfin['foo'] > 70)]",
          "dfout = dfin.loc[(dfin['bar'] == 8)].loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Get rows in dfin where column 'gamma' equals 9 and column 'beta' has value less than 40 or greater than 53",
            "user": "u1"
          },
          {
            "query": "Get rows in dataframe dfin where column 'gamma' equals 9 and column 'beta' has value less than 40 or greater than 53",
            "user": "u1"
          },
          {
            "query": "Get rows in dataframe dfin where column 'gamma' equals 9 and column 'beta' is less than 40 or greater than 53",
            "user": "u1"
          },
          {
            "query": "Get rows in dataframe dfin where column 'gamma' equals 9 and (column 'beta' is less than 40 or greater than 53)",
            "user": "u1"
          },
          {
            "query": "get rows with beta greater than 53 or less than 40 and gamma equal to 9",
            "user": "u7"
          },
          {
            "query": "get rows with beta greater than 53 or less than 40 AND gamma equal to 9",
            "user": "u7"
          },
          {
            "query": "get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'gamma': {0: -1, 1: 9, 2: 2, 3: 9, 4: 9, 5: -4, 6: 9, 7: 1}, 'alpha': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'beta': {1: 22, 6: 95}, 'gamma': {1: 9, 6: 9}, 'alpha': {1: -2, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'gamma': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 9, 9: 54, 10: 9}, 'alpha': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'beta': {8: 91}, 'gamma': {8: 9}, 'alpha': {8: 91}, 'testCol': {8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[((dfin['beta'] < 36) | (dfin['beta'] > 50)) & (dfin['gamma'] == 9)]",
          "dfout = dfin.loc[((dfin['beta'] < 36) | (dfin['beta'] > 50)) & (dfin['gamma'] == 9)]",
          "dfout = dfin[(dfin['gamma'] == 9) & ((dfin['beta'] < 36) | (dfin['beta'] > 50))]",
          "dfout = dfin.loc[(dfin['gamma'] == 9) & ((dfin['beta'] < 36) | (dfin['beta'] > 50))]",
          "dfout = dfin[(dfin['beta'] < 36) | (dfin['beta'] > 50)][(dfin['gamma'] == 9)]",
          "dfout = dfin.loc[(dfin['beta'] < 36) | (dfin['beta'] > 50)][(dfin['gamma'] == 9)]",
          "dfout = dfin[(dfin['beta'] < 36) | (dfin['beta'] > 50)].loc[(dfin['gamma'] == 9)]",
          "dfout = dfin.loc[(dfin['beta'] < 36) | (dfin['beta'] > 50)].loc[(dfin['gamma'] == 9)]",
          "dfout = dfin[(dfin['gamma'] == 9)][(dfin['beta'] < 36) | (dfin['beta'] > 50)]",
          "dfout = dfin[(dfin['gamma'] == 9)].loc[(dfin['beta'] < 36) | (dfin['beta'] > 50)]",
          "dfout = dfin.loc[(dfin['gamma'] == 9)][(dfin['beta'] < 36) | (dfin['beta'] > 50)]",
          "dfout = dfin.loc[(dfin['gamma'] == 9)].loc[(dfin['beta'] < 36) | (dfin['beta'] > 50)]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "filter rows where 'alpha' is equal to 4 and 'gamma' is less than 40 or greater than 53",
            "user": "u10"
          },
          {
            "query": "filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53",
            "user": "u10"
          },
          {
            "query": "From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4",
            "user": "u17"
          },
          {
            "query": "From dfin, filter rows with column alpha equal to 4 and column gamma less than 40 or more than 53",
            "user": "u17"
          },
          {
            "query": "From dfin, filter rows with column alpha equal to 4 and (column gamma less than 40 or more than 53)",
            "user": "u17"
          },
          {
            "query": "From dfin, filter rows with column alpha equal to 4 and ((column gamma less than 40) or (column gamma more than 53))",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'alpha': {0: -1, 1: 4, 2: 2, 3: 4, 4: 4, 5: -4, 6: 4, 7: 1}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'gamma': {1: 22, 6: 95}, 'alpha': {1: 4, 6: 4}, 'beta': {1: -2, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'gamma': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'alpha': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 4, 9: 54, 10: 4}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'gamma': {8: 91}, 'alpha': {8: 4}, 'beta': {8: 91}, 'testCol': {8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]",
          "dfout = dfin.loc[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]",
          "dfout = dfin[(dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]",
          "dfout = dfin.loc[(dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]",
          "dfout = dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)][(dfin['alpha'] == 4)]",
          "dfout = dfin.loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)][(dfin['alpha'] == 4)]",
          "dfout = dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)].loc[(dfin['alpha'] == 4)]",
          "dfout = dfin.loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)].loc[(dfin['alpha'] == 4)]",
          "dfout = dfin[(dfin['alpha'] == 4)][(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]",
          "dfout = dfin[(dfin['alpha'] == 4)].loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]",
          "dfout = dfin.loc[(dfin['alpha'] == 4)][(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]",
          "dfout = dfin.loc[(dfin['alpha'] == 4)].loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is either less than 38 or greater than 60",
            "user": "u5"
          },
          {
            "query": "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is not between 37 and 61",
            "user": "u5"
          },
          {
            "query": "retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11",
            "user": "u5"
          },
          {
            "query": "drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11",
            "user": "u5"
          },
          {
            "query": "print rows where (bar < 38 or bar > 60) and foo = 11",
            "user": "u14"
          },
          {
            "query": "print rows where bar < 38 or bar > 60 and foo = 11",
            "user": "u14"
          },
          {
            "query": "get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38",
            "user": "u19"
          },
          {
            "query": "get all rows with column 'foo' having value 11 and (column 'bar' value greater than 60 or less than 38)",
            "user": "u19"
          },
          {
            "query": "filter rows where (bar<38 || bar>60) && foo==11",
            "user": "u16"
          },
          {
            "query": "select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'foo': {0: -1, 1: 11, 2: 2, 3: 11, 4: 11, 5: -4, 6: 11, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'bar': {1: 22, 6: 95}, 'foo': {1: 11, 6: 11}, 'yah': {1: -2, 6: 6}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'foo': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 11, 9: 54, 10: 11}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'bar': {8: 91}, 'foo': {8: 11}, 'yah': {8: 91}, 'testCol': {8: 8}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]",
          "dfout = dfin.loc[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]",
          "dfout = dfin[(dfin['foo'] == 11) & ((dfin['bar'] < 38) | (dfin['bar'] > 60))]",
          "dfout = dfin.loc[(dfin['foo'] == 11) & ((dfin['bar'] < 38) | (dfin['bar'] > 60))]",
          "dfout = dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)][(dfin['foo'] == 11)]",
          "dfout = dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)][(dfin['foo'] == 11)]",
          "dfout = dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)].loc[(dfin['foo'] == 11)]",
          "dfout = dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)].loc[(dfin['foo'] == 11)]",
          "dfout = dfin[(dfin['foo'] == 11)][(dfin['bar'] < 38) | (dfin['bar'] > 60)]",
          "dfout = dfin[(dfin['foo'] == 11)].loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)]",
          "dfout = dfin.loc[(dfin['foo'] == 11)][(dfin['bar'] < 38) | (dfin['bar'] > 60)]",
          "dfout = dfin.loc[(dfin['foo'] == 11)].loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)]"
        ]
      }
    }
  },
  "6": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'",
            "user": "u12"
          },
          {
            "query": "filter all rows in input 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'",
            "user": "u12"
          },
          {
            "query": "get all rows in input 'dfin1' where value in column 'alpha' in 'dfin1' is not present in column 'alpha' of 'dfin2'",
            "user": "u12"
          },
          {
            "query": "get all rows in input 'dfin1' where column 'alpha' in 'dfin1' is not present in column 'alpha' of 'dfin2'",
            "user": "u12"
          },
          {
            "query": "drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'",
            "user": "u12"
          },
          {
            "query": "drop rows in 'dfin1' where value in column 'alpha' exists in column 'alpha' in 'dfin2'",
            "user": "u12"
          },
          {
            "query": "Remove rows of dfin1 that have the same value in column 'alpha' of dfin2",
            "user": "u6"
          },
          {
            "query": "Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2",
            "user": "u6"
          },
          {
            "query": "Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2 and remove them from dfin1",
            "user": "u6"
          },
          {
            "query": "Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1",
            "user": "u6"
          },
          {
            "query": "Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2",
            "user": "u6"
          },
          {
            "query": "Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2",
            "user": "u6"
          },
          {
            "query": "Remove all rows from dfin1 which has same column 'alpha' as dfin2",
            "user": "u15"
          },
          {
            "query": "Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1",
            "user": "u15"
          },
          {
            "query": "retain rows in dfin1 if 'alpha' in dfin2 not in 'alpha' in dfin1",
            "user": "u0"
          },
          {
            "query": "retain rows in dfin1 if 'alpha' in dfin2 is not in 'alpha' in dfin1",
            "user": "u0"
          },
          {
            "query": "retain rows in 'dfin1' if 'alpha' in 'dfin2' is not in 'alpha' in 'dfin1'",
            "user": "u0"
          },
          {
            "query": "select entries in dfin1 where column 'alpha' values are not in column 'alpha' of dfin2",
            "user": "u8"
          },
          {
            "query": "subtract dfin2 from dfin1 on column 'alpha'",
            "user": "u8"
          },
          {
            "query": "remove dfin2 from dfin1 on column 'alpha'",
            "user": "u8"
          },
          {
            "query": "set difference of dfin2 from dfin1 on column 'alpha'",
            "user": "u8"
          },
          {
            "query": "difference between dfin1 and dfin2 on column 'alpha'",
            "user": "u8"
          },
          {
            "query": "select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal",
            "user": "u8"
          },
          {
            "query": "select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal",
            "user": "u8"
          },
          {
            "query": "select values in df1 where column 'alpha' values in df2 and df1 are not equal",
            "user": "u8"
          },
          {
            "query": "select values in dfin1 where column 'alpha' values in dfin2 are not in dfin1",
            "user": "u8"
          },
          {
            "query": "select values in dfin1 where dfin1 values are not in df2 for column 'alpha'",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -4, 6: 5}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6}})",
              "pd.DataFrame({'alpha': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'beta': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'gamma': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'alpha': {1: 22, 2: 33, 5: 78}, 'beta': {1: -2, 2: 2, 5: -4}, 'gamma': {1: -2, 2: 2, 5: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 0, 3: 1, 4: 948, 5: 33, 6: 41, 7: 49, 8: 78, 9: 948, 10: 95}, 'beta': {0: -1, 1: -2, 2: 0, 3: 2, 4: 6, 5: 2, 6: 3, 7: 3, 8: -4, 9: 5, 10: 5}, 'gamma': {0: -1, 1: -2, 2: 0, 3: 3, 4: 8, 5: 2, 6: 3, 7: 3, 8: -5, 9: 8, 10: 6}})",
              "pd.DataFrame({'alpha': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'beta': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'gamma': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'alpha': {1: 22, 2: 0, 3: 1, 5: 33, 8: 78}, 'beta': {1: -2, 2: 0, 3: 2, 5: 2, 8: -4}, 'gamma': {1: -2, 2: 0, 3: 3, 5: 2, 8: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'",
            "user": "u1"
          },
          {
            "query": "Get rows in dataframe dfin1 where the value in column 'bar' is not present in column 'bar' of dfin2",
            "user": "u1"
          },
          {
            "query": "Get rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows in dataframe dfin1 where the value in column 'bar' is not in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where the value in column 'bar' is not in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where the values in column 'bar' do not match values in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where the values in column 'bar' do not exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where the values in column 'bar' is not in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where the values in column 'bar' is not one of the values of column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 whose value in column 'bar' is not in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 whose value in column 'bar' is not in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 whose value in column 'bar' does not exist in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where column 'bar' does not exist in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where column 'bar' values are not in dataframe dfin2 column 'bar'",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not in values in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' do not exist in values in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' do not exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe where intersection between dataframe dfin1 and dataframe dfin2 along column 'bar' is empty",
            "user": "u1"
          },
          {
            "query": "Remove rows from dataframe dfin1 whose values in column 'bar' exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Remove rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          },
          {
            "query": "Select rows from dataframe dfin1 where values in column 'bar' don't exist in column 'bar' of dataframe dfin2",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -4, 6: 5}, 'foo': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6}})",
              "pd.DataFrame({'bar': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'yah': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'foo': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'bar': {1: 22, 2: 33, 5: 78}, 'yah': {1: -2, 2: 2, 5: -4}, 'foo': {1: -2, 2: 2, 5: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 0, 3: 1, 4: 948, 5: 33, 6: 41, 7: 49, 8: 78, 9: 948, 10: 95}, 'yah': {0: -1, 1: -2, 2: 0, 3: 2, 4: 6, 5: 2, 6: 3, 7: 3, 8: -4, 9: 5, 10: 5}, 'foo': {0: -1, 1: -2, 2: 0, 3: 3, 4: 8, 5: 2, 6: 3, 7: 3, 8: -5, 9: 8, 10: 6}})",
              "pd.DataFrame({'bar': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'yah': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'foo': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'bar': {1: 22, 2: 0, 3: 1, 5: 33, 8: 78}, 'yah': {1: -2, 2: 0, 3: 2, 5: 2, 8: -4}, 'foo': {1: -2, 2: 0, 3: 3, 5: 2, 8: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1[~dfin1['bar'].isin(dfin2['bar'])]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "only retain those rows in 'dfin1' where element in column 'beta' is not present in dataframe 'dfin2' in column 'beta'",
            "user": "u5"
          },
          {
            "query": "only retain those rows in 'dfin1' where element in column 'beta' are not present in column 'beta' of 'dfin2'",
            "user": "u5"
          },
          {
            "query": "retain those rows in 'dfin1' where element in column 'beta' are not present in column 'beta' of 'dfin2'",
            "user": "u5"
          },
          {
            "query": "drop rows in 'dfin1' whose values of column 'beta' are present in 'beta' column of dfin2",
            "user": "u5"
          },
          {
            "query": "retain those rows in 'dfin1' where element in column 'beta' is not present i column 'beta' of 'dfin2'",
            "user": "u5"
          },
          {
            "query": "select all rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2",
            "user": "u3"
          },
          {
            "query": "select rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -4, 6: 5}, 'alpha': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6}})",
              "pd.DataFrame({'beta': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'gamma': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'alpha': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'beta': {1: 22, 2: 33, 5: 78}, 'gamma': {1: -2, 2: 2, 5: -4}, 'alpha': {1: -2, 2: 2, 5: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'beta': {0: 156, 1: 22, 2: 0, 3: 1, 4: 948, 5: 33, 6: 41, 7: 49, 8: 78, 9: 948, 10: 95}, 'gamma': {0: -1, 1: -2, 2: 0, 3: 2, 4: 6, 5: 2, 6: 3, 7: 3, 8: -4, 9: 5, 10: 5}, 'alpha': {0: -1, 1: -2, 2: 0, 3: 3, 4: 8, 5: 2, 6: 3, 7: 3, 8: -5, 9: 8, 10: 6}})",
              "pd.DataFrame({'beta': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'gamma': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'alpha': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'beta': {1: 22, 2: 0, 3: 1, 5: 33, 8: 78}, 'gamma': {1: -2, 2: 0, 3: 2, 5: 2, 8: -4}, 'alpha': {1: -2, 2: 0, 3: 3, 5: 2, 8: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1[~dfin1['beta'].isin(dfin2['beta'])]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "From dfin, filter rows with column dfin1.yah not in dfin2.yah",
            "user": "u17"
          },
          {
            "query": "From dfin, filter rows with dfin1.yah values not in column dfin2.yah",
            "user": "u17"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'yah': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'foo': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -4, 6: 5}, 'bar': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6}})",
              "pd.DataFrame({'yah': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'foo': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'bar': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'yah': {1: 22, 2: 33, 5: 78}, 'foo': {1: -2, 2: 2, 5: -4}, 'bar': {1: -2, 2: 2, 5: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'yah': {0: 156, 1: 22, 2: 0, 3: 1, 4: 948, 5: 33, 6: 41, 7: 49, 8: 78, 9: 948, 10: 95}, 'foo': {0: -1, 1: -2, 2: 0, 3: 2, 4: 6, 5: 2, 6: 3, 7: 3, 8: -4, 9: 5, 10: 5}, 'bar': {0: -1, 1: -2, 2: 0, 3: 3, 4: 8, 5: 2, 6: 3, 7: 3, 8: -5, 9: 8, 10: 6}})",
              "pd.DataFrame({'yah': {0: 156, 1: 948, 2: 41, 3: 49, 4: 79, 5: 95}, 'foo': {0: -1, 1: 3, 2: 3, 3: 3, 4: -4, 5: 6}, 'bar': {0: -1, 1: 12, 2: 3, 3: 4, 4: -5, 5: 5}})"
            ],
            "output": "pd.DataFrame({'yah': {1: 22, 2: 0, 3: 1, 5: 33, 8: 78}, 'foo': {1: -2, 2: 0, 3: 2, 5: 2, 8: -4}, 'bar': {1: -2, 2: 0, 3: 3, 5: 2, 8: -5}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1[~dfin1['yah'].isin(dfin2['yah'])]"
        ]
      }
    }
  },
  "7": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).",
            "user": "u12"
          },
          {
            "query": "filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).",
            "user": "u12"
          },
          {
            "query": "Choose rows such that in column 'foo' it is greater than equal 34 and less than equal 70 or in column 'bar' not equals 8",
            "user": "u13"
          },
          {
            "query": "Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8",
            "user": "u15"
          },
          {
            "query": "Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8",
            "user": "u15"
          },
          {
            "query": "Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8",
            "user": "u15"
          },
          {
            "query": "remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8",
            "user": "u0"
          },
          {
            "query": "drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8",
            "user": "u0"
          },
          {
            "query": "drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34",
            "user": "u0"
          },
          {
            "query": "drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34",
            "user": "u0"
          },
          {
            "query": "remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34",
            "user": "u0"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: 8, 5: -4, 6: 8, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'foo': {0: 156, 2: 33, 3: 41, 4: 49, 5: 78, 7: 48}, 'bar': {0: -1, 2: 2, 3: 8, 4: 8, 5: -4, 7: 1}, 'yah': {0: -1, 2: 2, 3: 3, 4: 3, 5: -5, 7: 15}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'bar': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 8, 9: 54, 10: 8}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 9: 54, 10: 45}, 'bar': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 9: 54, 10: 8}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 9: 9, 10: 10}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[~(((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8))]",
          "dfout = dfin.loc[~(((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8))]",
          "dfout = dfin[~((dfin['bar'] == 8) & ((dfin['foo'] < 34) | (dfin['foo'] > 70)))]",
          "dfout = dfin.loc[~((dfin['bar'] == 8) & ((dfin['foo'] < 34) | (dfin['foo'] > 70)))]",
          "dfout = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) | (dfin['bar'] != 8)]",
          "dfout = dfin.loc[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) | (dfin['bar'] != 8)]",
          "dfout = dfin[(dfin['bar'] != 8) | ((dfin['foo'] >= 34) & (dfin['foo'] <= 70))]",
          "dfout = dfin.loc[(dfin['bar'] != 8) | ((dfin['foo'] >= 34) & (dfin['foo'] <= 70))]"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3",
            "user": "u9"
          },
          {
            "query": "Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3",
            "user": "u9"
          },
          {
            "query": "Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3",
            "user": "u9"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'alpha': {0: 156, 2: 33, 3: 41, 4: 49, 5: 78, 7: 48}, 'beta': {0: -1, 2: 2, 3: 3, 4: 3, 5: -4, 7: 1}, 'gamma': {0: -1, 2: 2, 3: 3, 4: 3, 5: -5, 7: 15}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 3, 9: 54, 10: 3}, 'gamma': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'alpha': {0: 156, 2: 33, 3: 41, 4: 49, 5: 78, 7: 48, 9: 54, 10: 45}, 'beta': {0: -1, 2: 2, 3: 3, 4: 3, 5: -4, 7: 1, 9: 54, 10: 3}, 'gamma': {0: -1, 2: 2, 3: 3, 4: 3, 5: -5, 7: 15, 9: 54, 10: 45}, 'testCol': {0: 0, 2: 2, 3: 3, 4: 4, 5: 5, 7: 7, 9: 9, 10: 10}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[~(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3))]",
          "dfout = dfin.loc[~(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3))]",
          "dfout = dfin[~((dfin['beta'] == 3) & ((dfin['alpha'] < 40) | (dfin['alpha'] > 59)))]",
          "dfout = dfin.loc[~((dfin['beta'] == 3) & ((dfin['alpha'] < 40) | (dfin['alpha'] > 59)))]",
          "dfout = dfin[((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)) | (dfin['beta'] != 3)]",
          "dfout = dfin.loc[((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)) | (dfin['beta'] != 3)]",
          "dfout = dfin[(dfin['beta'] != 3) | ((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59))]",
          "dfout = dfin.loc[(dfin['beta'] != 3) | ((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59))]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11",
            "user": "u5"
          },
          {
            "query": "drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11",
            "user": "u5"
          },
          {
            "query": "print rows where not bar < 38 or bar > 60 and foo = 11",
            "user": "u14"
          },
          {
            "query": "print rows where not (bar < 38 or bar > 60 and foo = 11)",
            "user": "u14"
          },
          {
            "query": "filter rows where (bar>=38 && bar<=60) || foo!=11",
            "user": "u16"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'foo': {0: -1, 1: 11, 2: 2, 3: 11, 4: 11, 5: -4, 6: 11, 7: 1}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15}})"
            ],
            "output": "pd.DataFrame({'bar': {0: 156, 2: 33, 3: 41, 4: 49, 5: 78, 7: 48}, 'foo': {0: -1, 2: 2, 3: 11, 4: 11, 5: -4, 7: 1}, 'yah': {0: -1, 2: 2, 3: 3, 4: 3, 5: -5, 7: 15}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 8: 91, 9: 54, 10: 45}, 'foo': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 8: 11, 9: 54, 10: 11}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 8: 91, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}})"
            ],
            "output": "pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48, 9: 54, 10: 45}, 'foo': {0: -1, 1: 3, 2: 2, 3: 3, 4: 3, 5: -4, 6: 3, 7: 1, 9: 54, 10: 11}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5: -5, 6: 6, 7: 15, 9: 54, 10: 45}, 'testCol': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 9: 9, 10: 10}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin[~(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]",
          "dfout = dfin.loc[~(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]",
          "dfout = dfin[~((dfin['foo'] == 11) & ((dfin['bar'] < 38) | (dfin['bar'] > 60)))]",
          "dfout = dfin.loc[~((dfin['foo'] == 11) & ((dfin['bar'] < 38) | (dfin['bar'] > 60)))]",
          "dfout = dfin[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)]",
          "dfout = dfin.loc[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)]",
          "dfout = dfin[(dfin['foo'] != 11) | ((dfin['bar'] >= 38) & (dfin['bar'] <= 60))]",
          "dfout = dfin.loc[(dfin['foo'] != 11) | ((dfin['bar'] >= 38) & (dfin['bar'] <= 60))]"
        ]
      }
    }
  },
  "8": {
    "sets": {
      "C": {
        "queries": [
          {
            "query": "take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'",
            "user": "u4"
          },
          {
            "query": "take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back",
            "user": "u4"
          },
          {
            "query": "take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back",
            "user": "u4"
          },
          {
            "query": "take average of the previous 3 rows for each row of column 'a'",
            "user": "u4"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'a': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'b': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 5}})"
            ],
            "output": "pd.DataFrame({'a': {0: None, 1: None, 2: 70.33333333333333, 3: 32.0, 4: 41.0, 5: 56.0, 6: 74.0}, 'b': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['a'] = dfin['a'].rolling(3).mean()"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Compute rolling mean of window size 3 from 'colA'",
            "user": "u9"
          },
          {
            "query": "Create column 'colA' by computing rolling mean of window size 3 from 'colA'",
            "user": "u9"
          },
          {
            "query": "Use column 'colA' for computing rolling mean of window size 3",
            "user": "u9"
          },
          {
            "query": "Use column 'colA' from dfin to computing rolling mean of window size 3",
            "user": "u9"
          },
          {
            "query": "Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it",
            "user": "u9"
          },
          {
            "query": "Set value of colA to average of previous three values",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'colA': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'colB': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 5}})"
            ],
            "output": "pd.DataFrame({'colA': {0: None, 1: None, 2: 70.33333333333333, 3: 32.0, 4: 41.0, 5: 56.0, 6: 74.0}, 'colB': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['colA'] = dfin['colA'].rolling(3).mean()"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "in column two choose median of previous 3 rows and assign back",
            "user": "u13"
          },
          {
            "query": "in 'column2' choose median of previous 3 rows and assign back",
            "user": "u13"
          },
          {
            "query": "in 'column2' choose median of previous 3 rows and assign back to 'column2'",
            "user": "u13"
          },
          {
            "query": "Rolling median of last 3 values in place",
            "user": "u13"
          },
          {
            "query": "replace column2 by median of previous three rows",
            "user": "u0"
          },
          {
            "query": "replace values in column2 by median of column2 of previous three rows",
            "user": "u0"
          },
          {
            "query": "replace values of dfin in column2 by median of column2 of previous three rows",
            "user": "u0"
          },
          {
            "query": "copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows",
            "user": "u0"
          },
          {
            "query": "replace column 'column2' with median of current entry and two entries above",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'column2': {0: -1, 1: -2, 2: 2, 3: 3, 4: 4, 5: -4, 6: 5}})"
            ],
            "output": "pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'column2': {0: None, 1: None, 2: -1.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 4.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['column2'] = dfin['column2'].rolling(3).median()"
        ]
      }
    }
  },
  "9": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'",
            "user": "u12"
          },
          {
            "query": "join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'",
            "user": "u12"
          },
          {
            "query": "Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'",
            "user": "u6"
          },
          {
            "query": "Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value",
            "user": "u15"
          },
          {
            "query": "Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Date1' of dfin1 having same values as columns 'Type2' and 'Date2' of dfin2",
            "user": "u15"
          },
          {
            "query": "Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Date1' of dfin1 having same values as columns 'Type2' and 'Date2' of dfin2 respectively",
            "user": "u15"
          },
          {
            "query": "select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal",
            "user": "u8"
          },
          {
            "query": "Merge dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal",
            "user": "u8"
          },
          {
            "query": "Merge dfin1 and dfin2 on columns 'Type1' and 'Date1' and columns 'Type2' and 'Date2'",
            "user": "u8"
          },
          {
            "query": "inner merge dfin1 and dfin2 on left columns 'Type1' and 'Date1' and right columns 'Type2' and 'Date2'",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, 'Date1': {0: '3/12', 1: '3/12', 2: '4/15', 3: '5/17', 4: '5/17', 5: '6/18'}, 'var1': {0: 0.3685465859308151, 1: 0.4772916076126176, 2: -0.5091553991962084, 3: 0.1324838762281752, 4: 0.6917858288703738, 5: 1.3472101606143179}})",
              "pd.DataFrame({'Type2': {0: 'B', 1: 'B', 2: 'C', 3: 'C', 4: 'D', 5: 'D'}, 'Date2': {0: '2/8', 1: '4/15', 2: '5/17', 3: '6/18', 4: '6/18', 5: '7/21'}, 'var2': {0: 0.39292339579793817, 1: 2.1090289561567084, 2: 0.6378387041643695, 3: -1.4307347778971558, 4: -1.4785217568239037, 5: 0.5618965356263858}})"
            ],
            "output": "pd.DataFrame({'Type1': {0: 'B', 1: 'C', 2: 'C'}, 'Date1': {0: '4/15', 1: '5/17', 2: '6/18'}, 'var1': {0: -0.5091553991962084, 1: 0.6917858288703738, 2: 1.3472101606143179}, 'Type2': {0: 'B', 1: 'C', 2: 'C'}, 'Date2': {0: '4/15', 1: '5/17', 2: '6/18'}, 'var2': {0: 2.1090289561567084, 1: 0.6378387041643695, 2: -1.4307347778971558}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1.merge(dfin2, how='inner', left_on=['Type1','Date1'], right_on=['Type2','Date2'])"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "join dataframe dfin1 and dataframe dfin2 on key1 and key2",
            "user": "u1"
          },
          {
            "query": "inner join dataframe dfin1 and dataframe dfin2 on key1 and key2",
            "user": "u1"
          },
          {
            "query": "Inner Join on 'key1' and 'key2'",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'key1': {0: 'foo', 1: 'bar', 2: 'mu', 3: 'baz', 4: 'temp', 5: 'mah'}, 'value': {0: 1, 1: 2, 2: 3, 3: 5, 4: -2, 5: -5}})",
              "pd.DataFrame({'key2': {0: 'ram', 1: 'bar', 2: 'baz', 3: 'foo', 4: 'mah', 5: 'grr'}, 'value': {0: 5, 1: 6, 2: 7, 3: 8, 4: 24, 5: 2}})"
            ],
            "output": "pd.DataFrame({'key1': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_x': {0: 1, 1: 2, 2: 5, 3: -5}, 'key2': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_y': {0: 8, 1: 6, 2: 7, 3: 24}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1.merge(dfin2, how='inner', left_on='key1', right_on='key2')"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "join rows with same \"lkey\" and \"rkey\" values",
            "user": "u4"
          },
          {
            "query": "merge columns on \"lkey\" and \"rkey\"",
            "user": "u4"
          },
          {
            "query": "merge columns on \"lkey\" dfin1 and \"rkey\" dfin2",
            "user": "u4"
          },
          {
            "query": "create natural join of dfin1 and dfin2 where 'lkey' = 'rkey'",
            "user": "u10"
          },
          {
            "query": "calculate intersection of dfin1 and dfin2 where 'lkey' = 'rkey'",
            "user": "u10"
          },
          {
            "query": "calculate intersection of dfin1 and dfin2 where left on 'lkey' and right on 'rkey'",
            "user": "u10"
          },
          {
            "query": "merge dfin1 and dfin2 where left on 'lkey' and right on 'rkey'",
            "user": "u10"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'lkey': {0: 'foo', 1: 'bar', 2: 'mu', 3: 'baz', 4: 'temp', 5: 'mah'}, 'value': {0: 1, 1: 2, 2: 3, 3: 5, 4: -2, 5: -5}})",
              "pd.DataFrame({'rkey': {0: 'ram', 1: 'bar', 2: 'baz', 3: 'foo', 4: 'mah', 5: 'grr'}, 'value': {0: 5, 1: 6, 2: 7, 3: 8, 4: 24, 5: 2}})"
            ],
            "output": "pd.DataFrame({'lkey': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_x': {0: 1, 1: 2, 2: 5, 3: -5}, 'rkey': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_y': {0: 8, 1: 6, 2: 7, 3: 24}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1.merge(dfin2, how='inner', left_on='lkey', right_on='rkey')"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Join dfin1 and dfin2 on 'left_key' and 'right_key'",
            "user": "u9"
          },
          {
            "query": "Given dataframes df1 and df2, join the dataframes such that 'left_key' in df1 is equal to 'right_key' in df2",
            "user": "u18"
          },
          {
            "query": "Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key",
            "user": "u18"
          },
          {
            "query": "Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key",
            "user": "u18"
          },
          {
            "query": "Merge 'dfin1' and 'dfin2' using inner join",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'left_key': {0: 'foo', 1: 'bar', 2: 'mu', 3: 'baz', 4: 'temp', 5: 'mah'}, 'value': {0: 1, 1: 2, 2: 3, 3: 5, 4: -2, 5: -5}})",
              "pd.DataFrame({'right_key': {0: 'ram', 1: 'bar', 2: 'baz', 3: 'foo', 4: 'mah', 5: 'grr'}, 'value': {0: 5, 1: 6, 2: 7, 3: 8, 4: 24, 5: 2}})"
            ],
            "output": "pd.DataFrame({'left_key': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_x': {0: 1, 1: 2, 2: 5, 3: -5}, 'right_key': {0: 'foo', 1: 'bar', 2: 'baz', 3: 'mah'}, 'value_y': {0: 8, 1: 6, 2: 7, 3: 24}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1.merge(dfin2, how='inner', left_on='left_key', right_on='right_key')"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'",
            "user": "u16"
          },
          {
            "query": "combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Type2' in dfin1 are equal to column 'Type1' and column 'Date1' in dfin2",
            "user": "u3"
          },
          {
            "query": "select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match",
            "user": "u3"
          },
          {
            "query": "combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, 'Date1': {0: '3/12', 1: '3/12', 2: '4/15', 3: '5/17', 4: '5/17', 5: '6/18'}, 'var1': {0: -0.8917637100347613, 1: 1.4043000624717115, 2: 0.0521079794667121, 3: -0.2364814248771748, 4: -0.9175820878205109, 5: 1.058650307134188}})",
              "pd.DataFrame({'Type2': {0: 'B', 1: 'B', 2: 'C', 3: 'C', 4: 'D', 5: 'D'}, 'Date2': {0: '2/8', 1: '4/15', 2: '5/17', 3: '6/18', 4: '6/18', 5: '7/21'}, 'var2': {0: -0.7925420276031818, 1: 0.5188104981111373, 2: -0.5753712614577086, 3: 0.9600110958618806, 4: -1.5728458731587525, 5: -0.20448803399699442}})"
            ],
            "output": "pd.DataFrame({'Type1': {0: 'B', 1: 'C', 2: 'C'}, 'Date1': {0: '4/15', 1: '5/17', 2: '6/18'}, 'var1': {0: 0.0521079794667121, 1: -0.9175820878205109, 2: 1.058650307134188}, 'Type2': {0: 'B', 1: 'C', 2: 'C'}, 'Date2': {0: '4/15', 1: '5/17', 2: '6/18'}, 'var2': {0: 0.5188104981111373, 1: -0.5753712614577086, 2: 0.9600110958618806}})",
            "invars": [
              "dfin1",
              "dfin2"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin1.merge(dfin2, how='inner', left_on=['Type1','Date1'], right_on=['Type2','Date2'])"
        ]
      }
    }
  },
  "10": {
    "sets": {
      "C": {
        "queries": [
          {
            "query": "remove NaN values from \"delta\" and \"phi\" columns",
            "user": "u4"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'delta': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'mu': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'phi': {0: 3.1, 1: 21.0, 2: 245.0, 3: None}})"
            ],
            "output": "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'delta': {0: 17.0, 1: 111.0, 2: 322.0, 3: 1.0}, 'mu': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'phi': {0: 3.1, 1: 21.0, 2: 245.0, 3: 31.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.fillna({'delta': 17, 'phi': 31})",
          "dfout = dfin.fillna({\"delta\":17}).fillna({\"phi\":31})"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0",
            "user": "u6"
          },
          {
            "query": "Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin",
            "user": "u6"
          },
          {
            "query": "Replace NaN value in column 'phi' with value 11.0 and NaN value in column 'omega' with value 33.0",
            "user": "u6"
          },
          {
            "query": "Replace NaN value in column 'phi' with value 11.0 and replace NaN value in column 'omega' with value 33.0",
            "user": "u6"
          },
          {
            "query": "Replace NaN value in column 'phi' with value 11.0 and replace NaN value in column 'omega' with value 33.0 of table dfin",
            "user": "u6"
          },
          {
            "query": "if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0",
            "user": "u21"
          },
          {
            "query": "if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0",
            "user": "u21"
          },
          {
            "query": "if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0",
            "user": "u21"
          },
          {
            "query": "if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0",
            "user": "u21"
          },
          {
            "query": "replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'",
            "user": "u21"
          },
          {
            "query": "replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'",
            "user": "u21"
          },
          {
            "query": "replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')",
            "user": "u21"
          },
          {
            "query": "Replace missing values in column 'phi' with '11.0' and column 'omega' with value '33.0'",
            "user": "u15"
          },
          {
            "query": "Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'",
            "user": "u15"
          },
          {
            "query": "Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'",
            "user": "u15"
          },
          {
            "query": "Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'",
            "user": "u15"
          },
          {
            "query": "Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin",
            "user": "u15"
          },
          {
            "query": "replace nan in phi by 11 and nan in omega by 33",
            "user": "u0"
          },
          {
            "query": "replace nan in column 'phi' by 11 and nan in column 'omega' by 33",
            "user": "u0"
          },
          {
            "query": "change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan",
            "user": "u0"
          },
          {
            "query": "fill na values of column 'phi' with 11 and column 'omega' with 33",
            "user": "u8"
          },
          {
            "query": "fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33",
            "user": "u8"
          },
          {
            "query": "fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'omega': {0: 3.1, 1: 21.0, 2: 245.0, 3: None}})"
            ],
            "output": "pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: 11.0, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'omega': {0: 3.1, 1: 21.0, 2: 245.0, 3: 33.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.fillna({'phi': 11, 'omega': 33})",
          "dfout = dfin.fillna({\"phi\":11}).fillna({\"omega\":33})"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45",
            "user": "u9"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'mu': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'phi': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'delta': {0: 3.1, 1: 21.0, 2: 245.0, 3: None}})"
            ],
            "output": "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'mu': {0: 24.0, 1: 111.0, 2: 322.0, 3: 1.0}, 'phi': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'delta': {0: 3.1, 1: 21.0, 2: 245.0, 3: 45.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.fillna({'mu': 24, 'delta': 45})",
          "dfout = dfin.fillna({\"mu\":24}).fillna({\"delta\":45})"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0",
            "user": "u5"
          },
          {
            "query": "replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0",
            "user": "u5"
          },
          {
            "query": "fill NaN values in 'omega' column by 23.0, and fill NaN values in column 'pi' by 17.0",
            "user": "u5"
          },
          {
            "query": "replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0",
            "user": "u14"
          },
          {
            "query": "replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0",
            "user": "u14"
          },
          {
            "query": "replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0",
            "user": "u14"
          },
          {
            "query": "Replace nan in column 'omega' with 23.0 and column 'pi' with 17",
            "user": "u16"
          },
          {
            "query": "Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'",
            "user": "u16"
          },
          {
            "query": "Replace nan with 23 in column 'omega' and with 17 in column 'pi'",
            "user": "u16"
          },
          {
            "query": "Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'",
            "user": "u16"
          },
          {
            "query": "Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'",
            "user": "u16"
          },
          {
            "query": "replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'gamma': {0: 1, 1: 0, 2: 141, 3: 0}, 'omega': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'pi': {0: 3.1, 1: 21.0, 2: 245.0, 3: None}})"
            ],
            "output": "pd.DataFrame({'gamma': {0: 1, 1: 0, 2: 141, 3: 0}, 'omega': {0: 23.0, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'pi': {0: 3.1, 1: 21.0, 2: 245.0, 3: 17.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.fillna({'omega': 23, 'pi': 17})",
          "dfout = dfin.fillna({\"omega\":23}).fillna({\"pi\":17})"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "replace nan in column 'phi' with 10 and nan in column 'mu' with 20",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'mu': {0: 3.1, 1: 21.0, 2: 245.0, 3: None}})"
            ],
            "output": "pd.DataFrame({'omega': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: 13.0, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: 22.1, 2: None, 3: 277.0}, 'mu': {0: 3.1, 1: 21.0, 2: 245.0, 3: 27.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.fillna({'phi': 13, 'mu': 27})",
          "dfout = dfin.fillna({\"phi\":13}).fillna({\"mu\":27})"
        ]
      }
    }
  },
  "11": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'",
            "user": "u12"
          },
          {
            "query": "Replace 'United States' in column 'location' with 'US' and '3434' in column 'zip' with column 'zip' with '4343'",
            "user": "u6"
          },
          {
            "query": "Replace value 'United States' in column 'location' with 'US' and value '3434' in column 'zip' with column 'zip' with '4343'",
            "user": "u6"
          },
          {
            "query": "Replace value 'United States' in column 'location' with 'US' and value 3434 in column 'zip' with 4343",
            "user": "u6"
          },
          {
            "query": "Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'",
            "user": "u15"
          },
          {
            "query": "replace 'United States' in 'location' by 'US' and '3434' in 'zip' by '4343'",
            "user": "u0"
          },
          {
            "query": "replace 'United States' in 'location' by 'US'",
            "user": "u0"
          },
          {
            "query": "change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'",
            "user": "u0"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United States', 4: 'India'}, 'zip': {0: 4123, 1: 2912, 2: 3434, 3: 7126, 4: 9119}, 'random': {0: 'France', 1: 'United States', 2: 'DU', 3: None, 4: 'IN'}})"
            ],
            "output": "pd.DataFrame({'location': {0: 'US', 1: 'FR', 2: 'UK', 3: 'US', 4: 'India'}, 'zip': {0: 4123, 1: 2912, 2: 4343, 3: 7126, 4: 9119}, 'random': {0: 'France', 1: 'United States', 2: 'DU', 3: None, 4: 'IN'}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace({'location': {'United States': 'US'}, 'zip': {3434: 4343}})",
          "dfout = dfin.replace({\"location\":{'United States': 'US'}}).replace({\"zip\":{3434: 4343}})"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "change \"india\" to \"IN\" in \"country\" column and change \"London\" to \"LON\" in \"city\" column",
            "user": "u4"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India'}, 'city': {0: 'LA', 1: 'PAR', 2: 'London', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'India', 1: 'Mumbai', 2: 'DU', 3: 'London', 4: 'IN'}})"
            ],
            "output": "pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'IN', 4: 'IN'}, 'city': {0: 'LA', 1: 'PAR', 2: 'LON', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'India', 1: 'Mumbai', 2: 'DU', 3: 'London', 4: 'IN'}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace({'country': {'India': 'IN'}, 'city': {'London': 'LON'}})",
          "dfout = dfin.replace({\"country\":{'India': 'IN'}}).replace({\"city\":{'London': 'LON'}})"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'",
            "user": "u9"
          },
          {
            "query": "Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'",
            "user": "u9"
          },
          {
            "query": "Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'",
            "user": "u9"
          },
          {
            "query": "Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin",
            "user": "u9"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India'}, 'city': {0: 'LA', 1: 'PAR', 2: 'London', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'India', 1: 'Mumbai', 2: 'DU', 3: 'London', 4: 'IN'}})"
            ],
            "output": "pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'IN', 4: 'IN'}, 'city': {0: 'LA', 1: 'PAR', 2: 'LON', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'India', 1: 'Mumbai', 2: 'DU', 3: 'London', 4: 'IN'}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace({'country': {'India': 'IN'}, 'city': {'London': 'LON'}})",
          "dfout = dfin.replace({\"country\":{'India': 'IN'}}).replace({\"city\":{'London': 'LON'}})"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "replace value 'United States' by 'US' in column 'location' and replace '3434' in column 'zip' by '4343'",
            "user": "u5"
          },
          {
            "query": "replace 'United States' in column 'location' with 'US' and 3434 in column 'zip' with 4343",
            "user": "u14"
          },
          {
            "query": "Replace 'United States' with 'US' in column 'location' and 3434 with 4343 in column 'zip'",
            "user": "u16"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United States', 4: 'India'}, 'zip': {0: 4123, 1: 2912, 2: 3434, 3: 7126, 4: 9119}, 'random': {0: 'France', 1: 'United States', 2: 'DU', 3: None, 4: 'IN'}})"
            ],
            "output": "pd.DataFrame({'location': {0: 'US', 1: 'FR', 2: 'UK', 3: 'US', 4: 'India'}, 'zip': {0: 4123, 1: 2912, 2: 4343, 3: 7126, 4: 9119}, 'random': {0: 'France', 1: 'United States', 2: 'DU', 3: None, 4: 'IN'}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace({'location': {'United States': 'US'}, 'zip': {3434: 4343}})",
          "dfout = dfin.replace({\"location\":{'United States': 'US'}}).replace({\"zip\":{3434: 4343}})"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "replace 'France' with 'FR' in country",
            "user": "u7"
          },
          {
            "query": "for column country, replace 'France' with 'FR'",
            "user": "u7"
          },
          {
            "query": "replace 'France' with 'FR'",
            "user": "u7"
          },
          {
            "query": "replace 'France' with 'FR' in country column",
            "user": "u7"
          },
          {
            "query": "replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city",
            "user": "u7"
          },
          {
            "query": "replace 'France' with 'FR' in 'country' column and 'Paris' with 'PAR' in 'city' column",
            "user": "u7"
          },
          {
            "query": "replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column",
            "user": "u7"
          },
          {
            "query": "Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'country': {0: 'USA', 1: 'France', 2: 'UK', 3: 'France', 4: 'India'}, 'city': {0: 'LA', 1: 'Paris', 2: 'LON', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'France', 1: 'Paris', 2: 'DU', 3: 'London', 4: 'IN'}})"
            ],
            "output": "pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'FR', 4: 'India'}, 'city': {0: 'LA', 1: 'PAR', 2: 'LON', 3: 'MUM', 4: 'DEL'}, 'random': {0: 'France', 1: 'Paris', 2: 'DU', 3: 'London', 4: 'IN'}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace({'country': {'France': 'FR'}, 'city': {'Paris': 'PAR'}})",
          "dfout = dfin.replace({\"country\":{'France': 'FR'}}).replace({\"city\":{'Paris': 'PAR'}})"
        ]
      }
    }
  },
  "12": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "sort 'dfin' by index in ascending order",
            "user": "u12"
          },
          {
            "query": "Sort dataframe by index",
            "user": "u15"
          },
          {
            "query": "sort table by index",
            "user": "u0"
          },
          {
            "query": "sort dfin by index in ascending order",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29: 4, 234: 7, 1: 11, 150: 19}})"
            ],
            "output": "pd.DataFrame({'A': {1: 4, 29: 2, 100: 1, 150: 5, 234: 3}, 'B': {1: 11, 29: 4, 100: 3, 150: 19, 234: 7}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {100: 1, 29: 95, 55: 7, 47: 2, 234: 3, 191: 8, 1: 4, 150: 5}, 'B': {100: 3, 29: 5, 55: 3, 47: 4, 234: 7, 191: 3, 1: 11, 150: 19}})"
            ],
            "output": "pd.DataFrame({'A': {1: 4, 29: 95, 47: 2, 55: 7, 100: 1, 150: 5, 191: 8, 234: 3}, 'B': {1: 11, 29: 5, 47: 4, 55: 3, 100: 3, 150: 19, 191: 3, 234: 7}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.sort_index()"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Sort dataframe dfin by increasing column 'col2' and decreasing column 'col1'",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'col1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5}, 'col2': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3}})"
            ],
            "output": "pd.DataFrame({'col1': {4: 15, 3: -10, 0: 10, 6: 5, 1: 0, 2: 5, 5: -5}, 'col2': {4: 1, 3: 1, 0: 2, 6: 3, 1: 4, 2: 5, 5: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'col1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5, 7: 34, 8: -34, 9: 44, 10: 34, 11: 19, 12: 34}, 'col2': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3, 7: 1, 8: 2, 9: 3, 10: 5, 11: 2, 12: 0}})"
            ],
            "output": "pd.DataFrame({'col1': {12: 34, 7: 34, 4: 15, 3: -10, 11: 19, 0: 10, 8: -34, 9: 44, 6: 5, 1: 0, 10: 34, 2: 5, 5: -5}, 'col2': {12: 0, 7: 1, 4: 1, 3: 1, 11: 2, 0: 2, 8: 2, 9: 3, 6: 3, 1: 4, 10: 5, 2: 5, 5: 5}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.sort_values(by=['col2', 'col1'], ascending=[True, False])"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "sort dfin using values in column 2",
            "user": "u11"
          },
          {
            "query": "sort dfin using values in column 'column2'",
            "user": "u11"
          },
          {
            "query": "sort dfin using values in column 'column2' in descending order",
            "user": "u11"
          },
          {
            "query": "sort dfin using values in column 'column2' in descending order and then from column 'column1' in descending order",
            "user": "u11"
          },
          {
            "query": "sort table in descending order of 'column2' and then ascending order of 'column1'",
            "user": "u10"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'column1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5}, 'column2': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3}})"
            ],
            "output": "pd.DataFrame({'column1': {5: -5, 2: 5, 1: 0, 6: 5, 0: 10, 3: -10, 4: 15}, 'column2': {5: 5, 2: 5, 1: 4, 6: 3, 0: 2, 3: 1, 4: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'column1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5, 7: 34, 8: -34, 9: 44, 10: 34, 11: 19, 12: 34}, 'column2': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3, 7: 1, 8: 2, 9: 3, 10: 5, 11: 2, 12: 0}})"
            ],
            "output": "pd.DataFrame({'column1': {5: -5, 2: 5, 10: 34, 1: 0, 6: 5, 9: 44, 8: -34, 0: 10, 11: 19, 3: -10, 4: 15, 7: 34, 12: 34}, 'column2': {5: 5, 2: 5, 10: 5, 1: 4, 6: 3, 9: 3, 8: 2, 0: 2, 11: 2, 3: 1, 4: 1, 7: 1, 12: 0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.sort_values(by=['column2', 'column1'], ascending=[False, True])"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Sort dfin using column A, and then using column B",
            "user": "u9"
          },
          {
            "query": "Sort dfin using column B, and then using column A",
            "user": "u9"
          },
          {
            "query": "Sort dfin using column B descending, and then using column A ascending",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, sort the dataframe on the basis of column 'B'",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, sort the dataframe on the basis of column 'B' in ascending order",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, sort the dataframe on the basis of column 'B' in descending order",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, sort the dataframe on the basis of column 'B' in descending order and then on column 'A' in ascending order",
            "user": "u18"
          },
          {
            "query": "Sort column 'B' in descending order",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5}, 'B': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3}})"
            ],
            "output": "pd.DataFrame({'A': {5: -5, 2: 5, 1: 0, 6: 5, 0: 10, 3: -10, 4: 15}, 'B': {5: 5, 2: 5, 1: 4, 6: 3, 0: 2, 3: 1, 4: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5, 7: 34, 8: -34, 9: 44, 10: 34, 11: 19, 12: 34}, 'B': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, 6: 3, 7: 1, 8: 2, 9: 3, 10: 5, 11: 2, 12: 0}})"
            ],
            "output": "pd.DataFrame({'A': {5: -5, 2: 5, 10: 34, 1: 0, 6: 5, 9: 44, 8: -34, 0: 10, 11: 19, 3: -10, 4: 15, 7: 34, 12: 34}, 'B': {5: 5, 2: 5, 10: 5, 1: 4, 6: 3, 9: 3, 8: 2, 0: 2, 11: 2, 3: 1, 4: 1, 7: 1, 12: 0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.sort_values(by=['B', 'A'], ascending=[False, True])"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "sort column 'A' by serial number",
            "user": "u5"
          },
          {
            "query": "sort dfin",
            "user": "u14"
          },
          {
            "query": "sort based on row index",
            "user": "u14"
          },
          {
            "query": "sort rows of dfin1",
            "user": "u19"
          },
          {
            "query": "sort based on index",
            "user": "u16"
          },
          {
            "query": "sort dfin based on value",
            "user": "u3"
          },
          {
            "query": "sort dfin based on keys",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29: 4, 234: 7, 1: 11, 150: 19}})"
            ],
            "output": "pd.DataFrame({'A': {1: 4, 29: 2, 100: 1, 150: 5, 234: 3}, 'B': {1: 11, 29: 4, 100: 3, 150: 19, 234: 7}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {100: 1, 29: 95, 55: 7, 47: 2, 234: 3, 191: 8, 1: 4, 150: 5}, 'B': {100: 3, 29: 5, 55: 3, 47: 4, 234: 7, 191: 3, 1: 11, 150: 19}})"
            ],
            "output": "pd.DataFrame({'A': {1: 4, 29: 95, 47: 2, 55: 7, 100: 1, 150: 5, 191: 8, 234: 3}, 'B': {1: 11, 29: 5, 47: 4, 55: 3, 100: 3, 150: 19, 191: 3, 234: 7}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.sort_index()"
        ]
      }
    }
  },
  "13": {
    "sets": {
      "B": {
        "queries": [
          {
            "query": "create dataframe with values from column 'val' in dataframe dfin with values from column 'who' as the index and values from column 'timestamp' as the column",
            "user": "u1"
          },
          {
            "query": "create dataframe with values from column 'val' in dataframe dfin with unique values from column 'who' as the index and unique values from column 'timestamp' as the column",
            "user": "u1"
          },
          {
            "query": "create new dataframe from dataframe dfin with 'timestamp' as the columns, 'who' as the rows and values from 'val'",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'who': {0: 'A', 1: 'B', 2: 'A', 3: 'B'}, 'kind': {0: 11, 1: 11, 2: 12, 3: 12}, 'timestamp': {0: '2012-01-01', 1: '2012-01-01', 2: '2012-02-01', 3: '2012-02-01'}, 'val': {0: 4, 1: 5, 2: 6, 3: 7}})"
            ],
            "output": "_df = pd.DataFrame({'2012-01-01': {'A': 4, 'B': 5}, '2012-02-01': {'A': 6, 'B': 7}})\n_df.columns.names = ['timestamp']\n_df.index.names = ['who']\n_df",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.pivot(values='val', index='who', columns=['timestamp'])"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Pivot dfin on column 'date'",
            "user": "u9"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'name': {0: 'A', 1: 'B', 2: 'A', 3: 'B'}, 'type': {0: 11, 1: 11, 2: 12, 3: 12}, 'date': {0: '2012-01-01', 1: '2012-01-01', 2: '2012-02-01', 3: '2012-02-01'}, 'value': {0: 4, 1: 5, 2: 6, 3: 7}})"
            ],
            "output": "_df = pd.DataFrame({'2012-01-01': {'A': 4, 'B': 5}, '2012-02-01': {'A': 6, 'B': 7}})\n_df.columns.names = ['date']\n_df.index.names = ['name']\n_df",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.pivot(values='value', index='name', columns=['date'])"
        ]
      }
    }
  },
  "14": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "convert unique values in column 'target' to numeric encoding",
            "user": "u12"
          },
          {
            "query": "convert unique values in column 'target' of dataframe 'dfin' to numeric encoding",
            "user": "u12"
          },
          {
            "query": "convert unique values in column 'target' of dataframe 'dfin' to numeric encoding inplace",
            "user": "u12"
          },
          {
            "query": "encode unique values in column 'target' of dataframe 'dfin' as numbers inplace",
            "user": "u12"
          },
          {
            "query": "encode values in column 'target' of dataframe 'dfin' as numbers inplace",
            "user": "u12"
          },
          {
            "query": "convert values in 'target' column to numeric values",
            "user": "u0"
          },
          {
            "query": "replace values in 'target' column by enums",
            "user": "u0"
          },
          {
            "query": "remove 'class' from values in 'target' column; replace values in 'target' column by enums",
            "user": "u0"
          },
          {
            "query": "remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums",
            "user": "u0"
          },
          {
            "query": "label encode 'target' in place",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inp2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'inp3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'target': {0: 'classA', 1: 'classB', 2: 'classA', 3: 'classB', 4: 'classC'}})"
            ],
            "output": "pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inp2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'inp3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'target': {0: 0, 1: 1, 2: 0, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['target'] = pd.Categorical(dfin['target']).codes",
          "dfin['target'] = dfin['target'].astype('category').values.codes",
          "dfin['target'] = pd.factorize(dfin['target'])[0]",
          "dfin['target'] = dfin['target'].factorize()[0]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "convert goldLabel column into categories",
            "user": "u4"
          },
          {
            "query": "convert goldLabel column into categorical variables",
            "user": "u4"
          },
          {
            "query": "encode labels of \"goldLabel\" column",
            "user": "u4"
          },
          {
            "query": "label encode goldlabel column",
            "user": "u4"
          },
          {
            "query": "convert each row of \"goldLabel\" column into integer labels",
            "user": "u4"
          },
          {
            "query": "replace column 'goldLabel' with categorical classes",
            "user": "u11"
          },
          {
            "query": "column 'goldLabel' equals to column 'goldLabel' with categorical classes",
            "user": "u11"
          },
          {
            "query": "convert column 'goldLabel' to categorical data",
            "user": "u11"
          },
          {
            "query": "apply categorical function to column 'goldLabel' data",
            "user": "u11"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'ftr2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'ftr3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'goldLabel': {0: 'class1', 1: 'class2', 2: 'class1', 3: 'class2', 4: 'class3'}})"
            ],
            "output": "pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'ftr2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'ftr3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'goldLabel': {0: 0, 1: 1, 2: 0, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['goldLabel'] = pd.Categorical(dfin['goldLabel']).codes",
          "dfin['goldLabel'] = dfin['goldLabel'].astype('category').values.codes",
          "dfin['goldLabel'] = pd.factorize(dfin['goldLabel'])[0]",
          "dfin['goldLabel'] = dfin['goldLabel'].factorize()[0]"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Given dataframe dfin, encode the column 'labels' as a categorical variable",
            "user": "u18"
          },
          {
            "query": "Given dataframe dfin, encode the column 'labels' to numerical values",
            "user": "u18"
          },
          {
            "query": "Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values",
            "user": "u18"
          },
          {
            "query": "Transform 'labels' to numeric values",
            "user": "u2"
          },
          {
            "query": "Enumerate the 'labels' column",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'feat2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'feat3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'labels': {0: 'class_a', 1: 'class_b', 2: 'class_a', 3: 'class_b', 4: 'class_c'}})"
            ],
            "output": "pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'feat2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'feat3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'labels': {0: 0, 1: 1, 2: 0, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['labels'] = pd.Categorical(dfin['labels']).codes",
          "dfin['labels'] = dfin['labels'].astype('category').values.codes",
          "dfin['labels'] = pd.factorize(dfin['labels'])[0]",
          "dfin['labels'] = dfin['labels'].factorize()[0]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "do one hot encoding of column 'GoldTarget'",
            "user": "u5"
          },
          {
            "query": "convert 'GoldTarget' values in 'dfin' to categorical values",
            "user": "u3"
          },
          {
            "query": "convert 'GoldTarget' values in 'dfin' to numeric values",
            "user": "u3"
          },
          {
            "query": "convert 'GoldTarget' values in 'dfin' to numeric codes",
            "user": "u3"
          },
          {
            "query": "convert 'GoldTarget' in 'dfin' to numeric codes",
            "user": "u3"
          },
          {
            "query": "factorize 'GoldTarget' in 'dfin'",
            "user": "u3"
          },
          {
            "query": "convert values in 'GoldTarget' column to categorical codes",
            "user": "u3"
          },
          {
            "query": "convert values in 'GoldTarget' column to numeric codes",
            "user": "u3"
          },
          {
            "query": "convert values in 'GoldTarget' column to integers",
            "user": "u3"
          },
          {
            "query": "encode values in 'GoldTarget' to numeric",
            "user": "u3"
          },
          {
            "query": "encode values in 'GoldTarget' column to numeric",
            "user": "u3"
          },
          {
            "query": "change 'GoldTarget' column's data type to numeric",
            "user": "u3"
          },
          {
            "query": "change 'GoldTarget' column's data type to category and encode to numeric",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inputB': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'inputC': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'GoldTarget': {0: 'classA', 1: 'classB', 2: 'classA', 3: 'classB', 4: 'classC'}})"
            ],
            "output": "pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inputB': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'inputC': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'GoldTarget': {0: 0, 1: 1, 2: 0, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget']).codes",
          "dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').values.codes",
          "dfin['GoldTarget'] = pd.factorize(dfin['GoldTarget'])[0]",
          "dfin['GoldTarget'] = dfin['GoldTarget'].factorize()[0]"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "replace 'Label' with integers",
            "user": "u7"
          },
          {
            "query": "replace string in 'Label' with encoded integers",
            "user": "u7"
          },
          {
            "query": "map strings to numbers in 'Label'",
            "user": "u7"
          },
          {
            "query": "Replace 'Label' with categorical numbers",
            "user": "u7"
          },
          {
            "query": "Replace strings in 'Label' with categorical numbers",
            "user": "u7"
          },
          {
            "query": "make strings in 'Label' with categorical numbers",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'f2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'f3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'Label': {0: 'class1', 1: 'class2', 2: 'class1', 3: 'class2', 4: 'class3'}})"
            ],
            "output": "pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'f2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'f3': {0: 17, 1: 4, 2: 9, 3: 17, 4: 2}, 'Label': {0: 0, 1: 1, 2: 0, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['Label'] = pd.Categorical(dfin['Label']).codes",
          "dfin['Label'] = dfin['Label'].astype('category').values.codes",
          "dfin['Label'] = pd.factorize(dfin['Label'])[0]",
          "dfin['Label'] = dfin['Label'].factorize()[0]"
        ]
      }
    }
  },
  "15": {
    "sets": {
      "D": {
        "queries": [
          {
            "query": "count of duplicate rows",
            "user": "u12"
          },
          {
            "query": "count of duplicate rows in dataframe 'dfin'",
            "user": "u12"
          },
          {
            "query": "count of unique rows in dataframe 'dfin'",
            "user": "u12"
          },
          {
            "query": "substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'",
            "user": "u12"
          },
          {
            "query": "substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'",
            "user": "u12"
          },
          {
            "query": "substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows",
            "user": "u12"
          },
          {
            "query": "Count duplicate rows in dfin",
            "user": "u13"
          },
          {
            "query": "Count number of repitions of each row in dataframe",
            "user": "u15"
          },
          {
            "query": "Count number of repitions of each row in dataframe dfin",
            "user": "u15"
          },
          {
            "query": "Count number of duplicates in dataframe dfin",
            "user": "u15"
          },
          {
            "query": "Add number of duplicates in dataframe dfin",
            "user": "u15"
          },
          {
            "query": "Count number of duplicates in dataframe dfin and add them",
            "user": "u15"
          },
          {
            "query": "count number of duplicate rows in 'dfin'",
            "user": "u0"
          },
          {
            "query": "count number of duplicate rows in 'dfin' table",
            "user": "u0"
          },
          {
            "query": "number of duplicate rows in 'dfin' table",
            "user": "u0"
          },
          {
            "query": "number of duplicate rows in 'dfin' table; number of True values",
            "user": "u0"
          },
          {
            "query": "count duplicates rows",
            "user": "u8"
          },
          {
            "query": "count duplicates rows shape",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inp2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: 7}, 'inp3': {0: 17, 1: 17, 2: 4, 3: 9, 4: 9, 5: 17, 6: 9}, 'target': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 1, 6: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 4, 11: 4}, 'beta': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4, 10: 5, 11: 5}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.duplicated().sum()"
        ]
      },
      "B": {
        "queries": [
          {
            "query": "Find the number of duplicate rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Number of duplicate rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Number of unique rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Number of repeated rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Count of repeated rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Count of duplicated rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "How many duplicated rows in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "How many rows in dataframe 'dfin' are dupliate",
            "user": "u1"
          },
          {
            "query": "How many rows in dataframe 'dfin' are duplicate",
            "user": "u1"
          },
          {
            "query": "count number of duplicate rows",
            "user": "u7"
          },
          {
            "query": "count number of repeated rows",
            "user": "u7"
          },
          {
            "query": "count number of unique rows",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and number of unique rows",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and number of unique Rows",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and unique number of rows",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and number of 'unique rows'",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and number of distinct rows",
            "user": "u7"
          },
          {
            "query": "difference between number of rows and number of rows in drop duplicates",
            "user": "u7"
          },
          {
            "query": "difference between number of rows in drop duplicates and number of rows",
            "user": "u7"
          },
          {
            "query": "number of rows minus number of rows in drop duplicates",
            "user": "u7"
          },
          {
            "query": "number of rows in df minus number of rows in drop duplicates",
            "user": "u7"
          },
          {
            "query": "number of rows in df minus number of rows in drop duplicated df",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: 7}, 'f3': {0: 17, 1: 17, 2: 4, 3: 9, 4: 9, 5: 17, 6: 9}, 'Label': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 1, 6: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 4, 11: 4}, 'beta': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4, 10: 5, 11: 5}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.duplicated().sum()"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "find number of duplicate rows in dfin",
            "user": "u11"
          },
          {
            "query": "find count of duplicate rows in dfin",
            "user": "u11"
          },
          {
            "query": "find number of non unique rows in the table",
            "user": "u10"
          },
          {
            "query": "find number of rows which occur more than once in the table",
            "user": "u10"
          },
          {
            "query": "find number of duplicate rows",
            "user": "u10"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'ftr1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'ftr2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: 7}, 'ftr3': {0: 17, 1: 17, 2: 4, 3: 9, 4: 9, 5: 17, 6: 9}, 'goldLabel': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 1, 6: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 4, 11: 4}, 'beta': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4, 10: 5, 11: 5}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.duplicated().sum()"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Count the number of repeated rows",
            "user": "u9"
          },
          {
            "query": "Count the number of duplicate rows",
            "user": "u9"
          },
          {
            "query": "Drop the duplicate rows in dfin",
            "user": "u9"
          },
          {
            "query": "Drop the duplicate rows in dfin and show the length of the df",
            "user": "u9"
          },
          {
            "query": "Given a dataframe df, count the number of duplicate rows",
            "user": "u18"
          },
          {
            "query": "Given a dataframe df, count the number of duplicate rows and return the sum",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, count the number of duplicate rows and return the sum",
            "user": "u18"
          },
          {
            "query": "Get total number of duplicate rows",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'feat2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: 7}, 'feat3': {0: 17, 1: 17, 2: 4, 3: 9, 4: 9, 5: 17, 6: 9}, 'labels': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 1, 6: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 4, 11: 4}, 'beta': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4, 10: 5, 11: 5}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.duplicated().sum()"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "Count number of duplicate rows",
            "user": "u5"
          },
          {
            "query": "output number of duplicate rows in dfin",
            "user": "u14"
          },
          {
            "query": "number of duplicate rows in dfin",
            "user": "u14"
          },
          {
            "query": "number of duplicate rows",
            "user": "u14"
          },
          {
            "query": "remove all duplicate rows",
            "user": "u19"
          },
          {
            "query": "count the number of duplicate rows",
            "user": "u19"
          },
          {
            "query": "return the number of duplicate rows",
            "user": "u16"
          },
          {
            "query": "return total rows - unique rows",
            "user": "u16"
          },
          {
            "query": "return total rows - duplicate rows",
            "user": "u16"
          },
          {
            "query": "return total rows of dfin - unique rows of dfin",
            "user": "u16"
          },
          {
            "query": "return total rows of 'dfin' - unique rows of 'dfin'",
            "user": "u16"
          },
          {
            "query": "return number of nonunique rows",
            "user": "u16"
          },
          {
            "query": "return length - length of drop duplicates",
            "user": "u16"
          },
          {
            "query": "return length of din - length of drop duplicates of dfin",
            "user": "u16"
          },
          {
            "query": "find the number of repeated columns in 'dfin'",
            "user": "u3"
          },
          {
            "query": "count number of duplicated rows in 'dfin'",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: 7}, 'inputC': {0: 17, 1: 17, 2: 4, 3: 9, 4: 9, 5: 17, 6: 9}, 'GoldTarget': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 1, 6: 0}})"
            ],
            "output": "np.int64(3)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'alpha': {0: 0, 1: 0, 2: 0, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 3, 10: 4, 11: 4}, 'beta': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4, 10: 5, 11: 5}})"
            ],
            "output": "np.int64(7)",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.duplicated().sum()"
        ]
      }
    }
  },
  "16": {
    "sets": {
      "B": {
        "queries": [
          {
            "query": "Keep only one row per unique value of column 'f2' in dataframe 'dfin'",
            "user": "u1"
          },
          {
            "query": "Keep only the last row per unique value of column 'f2' in dataframe 'dfin'",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 7}, 'f3': {0: 17, 1: 17, 2: 9, 3: 9, 4: 17, 5: 9}, 'Label': {0: 0, 1: 0, 2: 1, 3: 1, 4: 1, 5: 0}})"
            ],
            "output": "pd.DataFrame({'f1': {1: 5, 2: 15, 5: 3}, 'f2': {1: 12, 2: -5, 5: 7}, 'f3': {1: 17, 2: 9, 5: 9}, 'Label': {1: 0, 2: 1, 5: 0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 7, 1: 2, 2: 5, 3: 15, 4: 2, 5: 3, 6: 3, 7: 33, 8: 2, 9: 3, 10: 1, 11: 0}, 'f2': {0: 12, 1: 4, 2: 12, 3: -5, 4: 4, 5: 7, 6: 4, 7: 7, 8: 4, 9: 9, 10: 2, 11: 7}, 'f3': {0: 17, 1: 10, 2: 17, 3: 9, 4: 5, 5: 9, 6: 5, 7: 17, 8: 5, 9: 9, 10: 3, 11: 8}, 'Label': {0: 0, 1: 14, 2: 0, 3: 1, 4: 7, 5: 1, 6: 7, 7: 1, 8: 7, 9: 0, 10: 4, 11: 1}})"
            ],
            "output": "pd.DataFrame({'f1': {2: 5, 3: 15, 8: 2, 9: 3, 10: 1, 11: 0}, 'f2': {2: 12, 3: -5, 8: 4, 9: 9, 10: 2, 11: 7}, 'f3': {2: 17, 3: 9, 8: 5, 9: 9, 10: 3, 11: 8}, 'Label': {2: 0, 3: 1, 8: 7, 9: 0, 10: 4, 11: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.drop_duplicates(subset=['f2'], keep='last')"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the last occurence unmarked",
            "user": "u18"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3}, 'feat2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 7}, 'feat3': {0: 17, 1: 17, 2: 9, 3: 9, 4: 17, 5: 9}, 'labels': {0: 0, 1: 0, 2: 1, 3: 1, 4: 1, 5: 0}})"
            ],
            "output": "pd.DataFrame({'feat1': {1: 5, 2: 15, 5: 3}, 'feat2': {1: 12, 2: -5, 5: 7}, 'feat3': {1: 17, 2: 9, 5: 9}, 'labels': {1: 0, 2: 1, 5: 0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 7, 1: 2, 2: 5, 3: 15, 4: 2, 5: 3, 6: 3, 7: 33, 8: 2, 9: 3, 10: 1, 11: 0}, 'feat2': {0: 12, 1: 4, 2: 12, 3: -5, 4: 4, 5: 7, 6: 4, 7: 7, 8: 4, 9: 9, 10: 2, 11: 7}, 'feat3': {0: 17, 1: 10, 2: 17, 3: 9, 4: 5, 5: 9, 6: 5, 7: 17, 8: 5, 9: 9, 10: 3, 11: 8}, 'labels': {0: 0, 1: 14, 2: 0, 3: 1, 4: 7, 5: 1, 6: 7, 7: 1, 8: 7, 9: 0, 10: 4, 11: 1}})"
            ],
            "output": "pd.DataFrame({'feat1': {2: 5, 3: 15, 8: 2, 9: 3, 10: 1, 11: 0}, 'feat2': {2: 12, 3: -5, 8: 4, 9: 9, 10: 2, 11: 7}, 'feat3': {2: 17, 3: 9, 8: 5, 9: 9, 10: 3, 11: 8}, 'labels': {2: 0, 3: 1, 8: 7, 9: 0, 10: 4, 11: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.drop_duplicates(subset=['feat2'], keep='last')"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "remove rows where element of column 'inputB' is not unique",
            "user": "u5"
          },
          {
            "query": "remove rows where values in 'inputB' are duplicates",
            "user": "u14"
          },
          {
            "query": "remove all duplicate entries of column 'inputB'",
            "user": "u19"
          },
          {
            "query": "remove all duplicate entries of column 'inputB' without keeping first",
            "user": "u19"
          },
          {
            "query": "remove all duplicate entries of column 'inputB' dont keep first or last",
            "user": "u19"
          },
          {
            "query": "drop duplicates from column'inputB' with keep as False",
            "user": "u16"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 7, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3, 6: 1, 7: 0}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 9, 6: 2, 7: 7}, 'inputC': {0: 17, 1: 17, 2: 9, 3: 9, 4: 17, 5: 9, 6: 3, 7: 8}, 'GoldTarget': {0: 0, 1: 0, 2: 1, 3: 1, 4: 1, 5: 0, 6: 4, 7: 1}})"
            ],
            "output": "pd.DataFrame({'inputA': {2: 15, 5: 3, 6: 1}, 'inputB': {2: -5, 5: 9, 6: 2}, 'inputC': {2: 9, 5: 9, 6: 3}, 'GoldTarget': {2: 1, 5: 0, 6: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 7, 1: 2, 2: 5, 3: 15, 4: 2, 5: 3, 6: 3, 7: 33, 8: 2, 9: 3, 10: 1, 11: 0}, 'inputB': {0: 12, 1: 4, 2: 12, 3: -5, 4: 4, 5: 7, 6: 4, 7: 7, 8: 4, 9: 9, 10: 2, 11: 7}, 'inputC': {0: 17, 1: 10, 2: 17, 3: 9, 4: 5, 5: 9, 6: 5, 7: 17, 8: 5, 9: 9, 10: 3, 11: 8}, 'GoldTarget': {0: 0, 1: 14, 2: 0, 3: 1, 4: 7, 5: 1, 6: 7, 7: 1, 8: 7, 9: 0, 10: 4, 11: 1}})"
            ],
            "output": "pd.DataFrame({'inputA': {3: 15, 9: 3, 10: 1}, 'inputB': {3: -5, 9: 9, 10: 2}, 'inputC': {3: 9, 9: 9, 10: 3}, 'GoldTarget': {3: 1, 9: 0, 10: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.drop_duplicates(subset=['inputB'], keep=False)"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Remove rows from dfin with duplicates on column 'inp2'",
            "user": "u15"
          },
          {
            "query": "delete rows of 'dfin' with same 'inp2' value",
            "user": "u0"
          },
          {
            "query": "delete rows with same 'inp2' value",
            "user": "u0"
          },
          {
            "query": "drop duplicates on subset 'inp2'",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 7, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3, 6: 1, 7: 0}, 'inp2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 9, 6: 2, 7: 7}, 'inp3': {0: 17, 1: 17, 2: 9, 3: 9, 4: 17, 5: 9, 6: 3, 7: 8}, 'target': {0: 0, 1: 0, 2: 1, 3: 1, 4: 1, 5: 0, 6: 4, 7: 1}})"
            ],
            "output": "pd.DataFrame({'inp1': {2: 15, 5: 3, 6: 1}, 'inp2': {2: -5, 5: 9, 6: 2}, 'inp3': {2: 9, 5: 9, 6: 3}, 'target': {2: 1, 5: 0, 6: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 7, 1: 2, 2: 5, 3: 15, 4: 2, 5: 3, 6: 3, 7: 33, 8: 2, 9: 3, 10: 1, 11: 0}, 'inp2': {0: 12, 1: 4, 2: 12, 3: -5, 4: 4, 5: 7, 6: 4, 7: 7, 8: 4, 9: 9, 10: 2, 11: 7}, 'inp3': {0: 17, 1: 10, 2: 17, 3: 9, 4: 5, 5: 9, 6: 5, 7: 17, 8: 5, 9: 9, 10: 3, 11: 8}, 'target': {0: 0, 1: 14, 2: 0, 3: 1, 4: 7, 5: 1, 6: 7, 7: 1, 8: 7, 9: 0, 10: 4, 11: 1}})"
            ],
            "output": "pd.DataFrame({'inp1': {3: 15, 9: 3, 10: 1}, 'inp2': {3: -5, 9: 9, 10: 2}, 'inp3': {3: 9, 9: 9, 10: 3}, 'target': {3: 1, 9: 0, 10: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.drop_duplicates(subset=['inp2'], keep=False)"
        ]
      }
    }
  },
  "17": {
    "sets": {
      "B": {
        "queries": [
          {
            "query": "In dataframe 'dfin' change values smaller than 10 to 10",
            "user": "u1"
          },
          {
            "query": "In dataframe 'dfin' replace values smaller than 10 to 10",
            "user": "u1"
          },
          {
            "query": "In dataframe 'dfin' set values that are smaller than 10 to 10",
            "user": "u1"
          },
          {
            "query": "In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10",
            "user": "u1"
          },
          {
            "query": "In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace",
            "user": "u1"
          },
          {
            "query": "Modify values in column 'f2' in dataframe 'dfin' that are smaller than 10 to the value 10",
            "user": "u1"
          },
          {
            "query": "find values in column 'f2' in dataframe 'dfin' that are smaller than 10 and change those values to 10",
            "user": "u1"
          },
          {
            "query": "find values in column 'f2' in dataframe 'dfin' that are smaller than 10 and replace them with 10",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'f2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'f3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'Label': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})"
            ],
            "output": "pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'f2': {0: 12, 1: 10, 2: 10, 3: 10, 4: 20}, 'f3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'Label': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['f2'] = dfin['f2'].clip(lower=10, upper=None)",
          "dfin['f2'] = dfin['f2'].clip(lower=10)",
          "dfin.loc[dfin['f2']<10, 'f2'] = 10",
          "dfin['f2'].loc[dfin['f2']<10] = 10",
          "dfin['f2'][dfin['f2']<10] = 10",
          "dfin['f2'] = dfin['f2'].map(lambda x : x if x > 10 else 10)",
          "dfin['f2'] = dfin['f2'].map(lambda x : x if x >= 10 else 10)",
          "dfin['f2'] = dfin['f2'].map(lambda x : 10 if x < 10 else x)",
          "dfin['f2'] = dfin['f2'].map(lambda x : 10 if x <= 10 else x)"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "change ftr2 column values to 5 if they are less than 5",
            "user": "u4"
          },
          {
            "query": "select all rows and change ftr2 column values to 5 if they are less than 5",
            "user": "u4"
          },
          {
            "query": "select all rows and change \"ftr2\" column value to 5 if value is less than 5",
            "user": "u4"
          },
          {
            "query": "change \"ftr2\" column value to 5 if value is less than 5",
            "user": "u4"
          },
          {
            "query": "if \"ftr2\" value is less than 5 then change it to 5",
            "user": "u4"
          },
          {
            "query": "if \"ftr2\" value is less than 5 then change it to 5 and return all rows",
            "user": "u4"
          },
          {
            "query": "for val in \"ft2\" val=5 if val<5",
            "user": "u4"
          },
          {
            "query": "if val of \"ftr2\" <5 then val=5",
            "user": "u4"
          },
          {
            "query": "select rows and change value of \"ftr2\" column if less than 5 to 5",
            "user": "u4"
          },
          {
            "query": "inplace transform of ftr2 columns if value less than 5 to 5",
            "user": "u4"
          },
          {
            "query": "replace values less than 5 with 5 in \"ftr2\" column in dfin",
            "user": "u4"
          },
          {
            "query": "replace values less than 5 with 5 in \"ftr2\" column in dfin inplace return dfin",
            "user": "u4"
          },
          {
            "query": "for each row replace ftr2 value if less than 5 with 5",
            "user": "u4"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'ftr2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'ftr3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'goldLabel': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})"
            ],
            "output": "pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'ftr2': {0: 12, 1: 5, 2: 7, 3: 5, 4: 20}, 'ftr3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'goldLabel': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['ftr2'] = dfin['ftr2'].clip(lower=5, upper=None)",
          "dfin['ftr2'] = dfin['ftr2'].clip(lower=5)",
          "dfin.loc[dfin['ftr2']<5, 'ftr2'] = 5",
          "dfin['ftr2'].loc[dfin['ftr2']<5] = 5",
          "dfin['ftr2'][dfin['ftr2']<5] = 5",
          "dfin['ftr2'] = dfin['ftr2'].map(lambda x : x if x > 5 else 5)",
          "dfin['ftr2'] = dfin['ftr2'].map(lambda x : x if x >= 5 else 5)",
          "dfin['ftr2'] = dfin['ftr2'].map(lambda x : 5 if x < 5 else x)",
          "dfin['ftr2'] = dfin['ftr2'].map(lambda x : 5 if x <= 5 else x)"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "If value of 'feat2' in greater than 10, replace it with 10",
            "user": "u9"
          },
          {
            "query": "If value of 'feat2' is greater than 10, replace it with 10",
            "user": "u9"
          },
          {
            "query": "Limit the value in column 'feat2' to 10",
            "user": "u9"
          },
          {
            "query": "Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10",
            "user": "u18"
          },
          {
            "query": "Replace all values in 'feat2' greater than '10' with '10'",
            "user": "u2"
          },
          {
            "query": "Replace all values in 'feat2' greater than 10 with 10",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'feat2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'feat3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'labels': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})"
            ],
            "output": "pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'feat2': {0: 10, 1: -5, 2: 7, 3: -3, 4: 10}, 'feat3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'labels': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['feat2'] = dfin['feat2'].clip(lower=None, upper=10)",
          "dfin['feat2'] = dfin['feat2'].clip(upper=10)",
          "dfin.loc[dfin['feat2']>10, 'feat2'] = 10",
          "dfin['feat2'].loc[dfin['feat2']>10] = 10",
          "dfin['feat2'][dfin['feat2']>10] = 10",
          "dfin['feat2'] = dfin['feat2'].map(lambda x : x if x < 10 else 10)",
          "dfin['feat2'] = dfin['feat2'].map(lambda x : x if x <= 10 else 10)",
          "dfin['feat2'] = dfin['feat2'].map(lambda x : 10 if x > 10 else x)",
          "dfin['feat2'] = dfin['feat2'].map(lambda x : 10 if x >= 10 else x)"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Convert negative numberts to 0 in 'inp2'",
            "user": "u13"
          },
          {
            "query": "Convert negative numberts of 'dfin' to 0 in column 'inp2'",
            "user": "u13"
          },
          {
            "query": "Convert negative numberts to 0 in column 'inp2'",
            "user": "u13"
          },
          {
            "query": "Convert negative numbers of 'dfin' to 0 in column 'inp2'",
            "user": "u13"
          },
          {
            "query": "Change value of column 'inp2' to 0 if value of column 'inp2' is less than 0",
            "user": "u15"
          },
          {
            "query": "replace negative values in 'inp2' by 0",
            "user": "u0"
          },
          {
            "query": "if 'inp2'<0 then 'inp2'=0",
            "user": "u0"
          },
          {
            "query": "replace 'inp2' by 0 if 'inp2' less than 0",
            "user": "u0"
          },
          {
            "query": "replace column 'inp2' in 'dfin' with 0 if 'inp2' less than 0",
            "user": "u0"
          },
          {
            "query": "replace values in column 'inp2' in 'dfin' with 0 if 'inp2' less than 0",
            "user": "u0"
          },
          {
            "query": "replace values in column 'inp2' in table 'dfin' with 0 if 'inp2' less than 0",
            "user": "u0"
          },
          {
            "query": "copy dfin to dfout; replace negative values in column 'inp2' by 0",
            "user": "u0"
          },
          {
            "query": "replace value in column 'inp2' with 0 if value is less than 0",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inp2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'inp3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'target': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})"
            ],
            "output": "pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inp2': {0: 12, 1: 0, 2: 7, 3: 0, 4: 20}, 'inp3': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'target': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['inp2'] = dfin['inp2'].clip(lower=0, upper=None)",
          "dfin['inp2'] = dfin['inp2'].clip(lower=0)",
          "dfin.loc[dfin['inp2']<0, 'inp2'] = 0",
          "dfin['inp2'].loc[dfin['inp2']<0] = 0",
          "dfin['inp2'][dfin['inp2']<0] = 0",
          "dfin['inp2'] = dfin['inp2'].map(lambda x : x if x > 0 else 0)",
          "dfin['inp2'] = dfin['inp2'].map(lambda x : x if x >= 0 else 0)",
          "dfin['inp2'] = dfin['inp2'].map(lambda x : 0 if x < 0 else x)",
          "dfin['inp2'] = dfin['inp2'].map(lambda x : 0 if x <= 0 else x)"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "replace elements that are greater than 0 with 0 in column 'inputB'",
            "user": "u5"
          },
          {
            "query": "replace positive elements with 0 in column 'inputB'",
            "user": "u5"
          },
          {
            "query": "replace positive elements by 0 in column 'inputB'",
            "user": "u5"
          },
          {
            "query": "replace elements greater than 0 by 0 in column 'inputB'",
            "user": "u5"
          },
          {
            "query": "replace elements greater than 0 by zero in column 'inputB'",
            "user": "u5"
          },
          {
            "query": "in column 'inputB', replace elements greater than 0 by zero",
            "user": "u5"
          },
          {
            "query": "in column 'inputB', replace positive values by zero",
            "user": "u5"
          },
          {
            "query": "replace positive values in column 'inputB' by zero",
            "user": "u5"
          },
          {
            "query": "replace positive values in column 'inputB' by zero'",
            "user": "u5"
          },
          {
            "query": "if value in column 'inputB' > 0 replace with 0",
            "user": "u14"
          },
          {
            "query": "replace value in column 'inputB' with 0 if value > 0",
            "user": "u14"
          },
          {
            "query": "replace positive vlues of column 'inputB' with 0",
            "user": "u19"
          },
          {
            "query": "replace positive values of column 'inputB' to '0'",
            "user": "u19"
          },
          {
            "query": "set positive values in column 'inputB' to '0'",
            "user": "u19"
          },
          {
            "query": "Set inputB=0 if inputB<0",
            "user": "u16"
          },
          {
            "query": "replace inputB with 0 if inputB>0",
            "user": "u16"
          },
          {
            "query": "set inputB as 0 if inputB>0",
            "user": "u16"
          },
          {
            "query": "Replace column 'inputB' with 0 if inputB>0",
            "user": "u16"
          },
          {
            "query": "Replace 'inputB' with 0 if inputB>0",
            "user": "u16"
          },
          {
            "query": "Replace 'inputB' with 0 if inputB is positive",
            "user": "u16"
          },
          {
            "query": "if inputB>0 set inputB=0",
            "user": "u16"
          },
          {
            "query": "if inputB>0 update inputB=0",
            "user": "u16"
          },
          {
            "query": "replace values greater than 0 with 0 in 'inputB' column in 'dfin'",
            "user": "u3"
          },
          {
            "query": "update values greater than 0 in 'inputB' column with 0",
            "user": "u3"
          },
          {
            "query": "'inputB' = 0 if 'inputB' > 0 in dfin",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inputB': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'inputC': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'GoldTarget': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})"
            ],
            "output": "pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inputB': {0: 0, 1: -5, 2: 0, 3: -3, 4: 0}, 'inputC': {0: 17, 1: 9, 2: 9, 3: -1, 4: 15}, 'GoldTarget': {0: 0, 1: 1, 2: 1, 3: 1, 4: 2}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['inputB'] = dfin['inputB'].clip(lower=None, upper=0)",
          "dfin['inputB'] = dfin['inputB'].clip(upper=0)",
          "dfin.loc[dfin['inputB']>0, 'inputB'] = 0",
          "dfin['inputB'].loc[dfin['inputB']>0] = 0",
          "dfin['inputB'][dfin['inputB']>0] = 0",
          "dfin['inputB'] = dfin['inputB'].map(lambda x : x if x < 0 else 0)",
          "dfin['inputB'] = dfin['inputB'].map(lambda x : x if x <= 0 else 0)",
          "dfin['inputB'] = dfin['inputB'].map(lambda x : 0 if x > 0 else x)",
          "dfin['inputB'] = dfin['inputB'].map(lambda x : 0 if x >= 0 else x)"
        ]
      }
    }
  },
  "18": {
    "sets": {
      "A": {
        "queries": [
          {
            "query": "Given a dataframe dfin, remove all rows where there exists a cell with value '-'",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, select all rows where there is a '-'",
            "user": "u18"
          },
          {
            "query": "Given a dataframe dfin, select all rows where there is an occurence of '-' for any column",
            "user": "u18"
          },
          {
            "query": "Drop rows containing '-'",
            "user": "u2"
          },
          {
            "query": "Drop rows containing value equal to '-'",
            "user": "u2"
          },
          {
            "query": "Drop rows where containing value is equal to '-'",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, 1: 0, 2: '-', 3: 1, 4: 1, 5: 0, 6: 1}, 'C': {0: 0, 1: 7.5, 2: 1.5, 3: 3.0, 4: '-', 5: 4.5, 6: 6.0}, 'D': {0: 0, 1: 2, 2: '-', 3: 1, 4: 0, 5: 1, 6: 2}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1, 1: 1, 3: 0, 5: 1, 6: 0}, 'B': {0: 0.0, 1: 0.0, 3: 1.0, 5: 0.0, 6: 1.0}, 'C': {0: 0.0, 1: 7.5, 3: 3.0, 5: 4.5, 6: 6.0}, 'D': {0: 0.0, 1: 2.0, 3: 1.0, 5: 1.0, 6: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 0, 2: 4, 3: 1, 4: 2, 5: 1, 6: 0, 7: 0, 8: 1, 9: 0, 10: '-'}, 'B': {0: 0, 1: 0, 2: 5, 3: 0, 4: '-', 5: 2, 6: 1, 7: 1, 8: 0, 9: 1, 10: '-'}, 'C': {0: 0, 1: 0, 2: 6, 3: 7.5, 4: 1.5, 5: 3, 6: 3.0, 7: '-', 8: 4.5, 9: 6.0, 10: 100}, 'D': {0: 0, 1: '-', 2: 7, 3: 2, 4: '-', 5: 4, 6: 1, 7: 0, 8: 1, 9: 2, 10: 100}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1.0, 2: 4.0, 3: 1.0, 5: 1.0, 6: 0.0, 8: 1.0, 9: 0.0}, 'B': {0: 0.0, 2: 5.0, 3: 0.0, 5: 2.0, 6: 1.0, 8: 0.0, 9: 1.0}, 'C': {0: 0.0, 2: 6.0, 3: 7.5, 5: 3.0, 6: 3.0, 8: 4.5, 9: 6.0}, 'D': {0: 0.0, 2: 7.0, 3: 2.0, 5: 4.0, 6: 1.0, 8: 1.0, 9: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace('-', np.nan).dropna()"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Remove rows with '?' in any column",
            "user": "u13"
          },
          {
            "query": "Remove rows with '?'",
            "user": "u13"
          },
          {
            "query": "Remove rows with value '?'",
            "user": "u13"
          },
          {
            "query": "Remove rows with ? in any column of dfin",
            "user": "u13"
          },
          {
            "query": "Replace values '?' with 'NaN' and Remove rows which has any column value missing",
            "user": "u15"
          },
          {
            "query": "Replace values '?' with 'NaN' and then drop rows which has any column value missing",
            "user": "u15"
          },
          {
            "query": "Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing",
            "user": "u15"
          },
          {
            "query": "Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing",
            "user": "u15"
          },
          {
            "query": "Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value",
            "user": "u15"
          },
          {
            "query": "Replace values '?' with numpy NaN in dfin and drop rows which has any missing value",
            "user": "u15"
          },
          {
            "query": "drop rows where values are '?'",
            "user": "u0"
          },
          {
            "query": "drop rows in 'dfin' where values are '?'",
            "user": "u0"
          },
          {
            "query": "get columns in 'dfin'; drop rows in values in columns are '?'",
            "user": "u0"
          },
          {
            "query": "drop rows in 'dfin' if some column has value '?'",
            "user": "u0"
          },
          {
            "query": "drop na values where nan is '?'",
            "user": "u8"
          },
          {
            "query": "drop rows where any value is '?'",
            "user": "u8"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, 1: 0, 2: '?', 3: 1, 4: 1, 5: 0, 6: 1}, 'C': {0: 0, 1: 7.5, 2: 1.5, 3: 3.0, 4: '?', 5: 4.5, 6: 6.0}, 'D': {0: 0, 1: 2, 2: '?', 3: 1, 4: 0, 5: 1, 6: 2}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1, 1: 1, 3: 0, 5: 1, 6: 0}, 'B': {0: 0.0, 1: 0.0, 3: 1.0, 5: 0.0, 6: 1.0}, 'C': {0: 0.0, 1: 7.5, 3: 3.0, 5: 4.5, 6: 6.0}, 'D': {0: 0.0, 1: 2.0, 3: 1.0, 5: 1.0, 6: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 0, 2: 4, 3: 1, 4: 2, 5: 1, 6: 0, 7: 0, 8: 1, 9: 0, 10: '?'}, 'B': {0: 0, 1: 0, 2: 5, 3: 0, 4: '?', 5: 2, 6: 1, 7: 1, 8: 0, 9: 1, 10: '?'}, 'C': {0: 0, 1: 0, 2: 6, 3: 7.5, 4: 1.5, 5: 3, 6: 3.0, 7: '?', 8: 4.5, 9: 6.0, 10: 100}, 'D': {0: 0, 1: '?', 2: 7, 3: 2, 4: '?', 5: 4, 6: 1, 7: 0, 8: 1, 9: 2, 10: 100}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1.0, 2: 4.0, 3: 1.0, 5: 1.0, 6: 0.0, 8: 1.0, 9: 0.0}, 'B': {0: 0.0, 2: 5.0, 3: 0.0, 5: 2.0, 6: 1.0, 8: 0.0, 9: 1.0}, 'C': {0: 0.0, 2: 6.0, 3: 7.5, 5: 3.0, 6: 3.0, 8: 4.5, 9: 6.0}, 'D': {0: 0.0, 2: 7.0, 3: 2.0, 5: 4.0, 6: 1.0, 8: 1.0, 9: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace('?', np.nan).dropna()"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "Remove rows having '?'",
            "user": "u16"
          },
          {
            "query": "drop rows having '?'",
            "user": "u16"
          },
          {
            "query": "drop rows having '?' in any column",
            "user": "u16"
          },
          {
            "query": "select rows if does not contain '?'",
            "user": "u16"
          },
          {
            "query": "remove rows from 'dfin' that have ?",
            "user": "u3"
          },
          {
            "query": "remove rows from 'dfin' that have '?'",
            "user": "u3"
          },
          {
            "query": "drop rows from 'dfin' that contain '?'",
            "user": "u3"
          },
          {
            "query": "drop rows from 'dfin' that contain ?",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, 1: 0, 2: '?', 3: 1, 4: 1, 5: 0, 6: 1}, 'C': {0: 0, 1: 7.5, 2: 1.5, 3: 3.0, 4: '?', 5: 4.5, 6: 6.0}, 'D': {0: 0, 1: 2, 2: '?', 3: 1, 4: 0, 5: 1, 6: 2}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1, 1: 1, 3: 0, 5: 1, 6: 0}, 'B': {0: 0.0, 1: 0.0, 3: 1.0, 5: 0.0, 6: 1.0}, 'C': {0: 0.0, 1: 7.5, 3: 3.0, 5: 4.5, 6: 6.0}, 'D': {0: 0.0, 1: 2.0, 3: 1.0, 5: 1.0, 6: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          },
          {
            "inputs": [
              "pd.DataFrame({'A': {0: 1, 1: 0, 2: 4, 3: 1, 4: 2, 5: 1, 6: 0, 7: 0, 8: 1, 9: 0, 10: '?'}, 'B': {0: 0, 1: 0, 2: 5, 3: 0, 4: '?', 5: 2, 6: 1, 7: 1, 8: 0, 9: 1, 10: '?'}, 'C': {0: 0, 1: 0, 2: 6, 3: 7.5, 4: 1.5, 5: 3, 6: 3.0, 7: '?', 8: 4.5, 9: 6.0, 10: 100}, 'D': {0: 0, 1: '?', 2: 7, 3: 2, 4: '?', 5: 4, 6: 1, 7: 0, 8: 1, 9: 2, 10: 100}})"
            ],
            "output": "pd.DataFrame({'A': {0: 1.0, 2: 4.0, 3: 1.0, 5: 1.0, 6: 0.0, 8: 1.0, 9: 0.0}, 'B': {0: 0.0, 2: 5.0, 3: 0.0, 5: 2.0, 6: 1.0, 8: 0.0, 9: 1.0}, 'C': {0: 0.0, 2: 6.0, 3: 7.5, 5: 3.0, 6: 3.0, 8: 4.5, 9: 6.0}, 'D': {0: 0.0, 2: 7.0, 3: 2.0, 5: 4.0, 6: 1.0, 8: 1.0, 9: 2.0}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfout"
          }
        ],
        "solutions": [
          "dfout = dfin.replace('?', np.nan).dropna()"
        ]
      }
    }
  },
  "19": {
    "sets": {
      "B": {
        "queries": [
          {
            "query": "Remove rows from dataframe 'data' that are present in dataframe 'test'",
            "user": "u1"
          },
          {
            "query": "remove rows in test from data",
            "user": "u7"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'f2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1}, 'f3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0}, 'Label': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2}})",
              "pd.DataFrame({'f1': {6: 0, 2: 2}, 'f2': {6: 1, 2: 2}, 'f3': {6: 6.0, 2: 1.5}, 'Label': {6: 2, 2: 1}})"
            ],
            "output": "pd.DataFrame({'f1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1}, 'f2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0}, 'f3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5}, 'Label': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          },
          {
            "inputs": [
              "pd.DataFrame({'f1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'f2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'f3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'Label': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
              "pd.DataFrame({'f1': {2: 2, 9: -2}, 'f2': {2: 2, 9: 5}, 'f3': {2: 1.5, 9: 30.0}, 'Label': {2: 1, 9: 1}})"
            ],
            "output": "pd.DataFrame({'f1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8}, 'f2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1}, 'f3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0}, 'Label': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          }
        ],
        "solutions": [
          "train = data.drop(test.index)",
          "train = data[~data.index.isin(test.index)]",
          "train = data.loc[~data.index.isin(test.index)]"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "select all rows from \"data\" that are not present in \"test\"",
            "user": "u4"
          },
          {
            "query": "remove  \"test\" rows from \"data\"",
            "user": "u4"
          },
          {
            "query": "select all \"data\" rows not in \"test\"",
            "user": "u4"
          },
          {
            "query": "remove all common rows that \"data\" and \"test\" contain",
            "user": "u4"
          },
          {
            "query": "select all rows of data that are not in test",
            "user": "u11"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'ftr1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'ftr2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1}, 'ftr3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0}, 'goldLabel': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2}})",
              "pd.DataFrame({'ftr1': {6: 0, 2: 2}, 'ftr2': {6: 1, 2: 2}, 'ftr3': {6: 6.0, 2: 1.5}, 'goldLabel': {6: 2, 2: 1}})"
            ],
            "output": "pd.DataFrame({'ftr1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1}, 'ftr2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0}, 'ftr3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5}, 'goldLabel': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          },
          {
            "inputs": [
              "pd.DataFrame({'ftr1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'ftr2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'ftr3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'goldLabel': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
              "pd.DataFrame({'ftr1': {2: 2, 9: -2, 6: 0, 4: 0}, 'ftr2': {2: 2, 9: 5, 6: 1, 4: 1}, 'ftr3': {2: 1.5, 9: 30.0, 6: 6.0, 4: 6.0}, 'goldLabel': {2: 1, 9: 1, 6: 2, 4: 0}})"
            ],
            "output": "pd.DataFrame({'ftr1': {0: 1, 1: 1, 3: 0, 5: 1, 7: 2, 8: 8}, 'ftr2': {0: 0, 1: 0, 3: 1, 5: 0, 7: 5, 8: -1}, 'ftr3': {0: 0.0, 1: 7.5, 3: 3.0, 5: 4.5, 7: 12.0, 8: 8.0}, 'goldLabel': {0: 0, 1: 2, 3: 1, 5: 1, 7: 2, 8: 3}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          }
        ],
        "solutions": [
          "train = data.drop(test.index)",
          "train = data[~data.index.isin(test.index)]",
          "train = data.loc[~data.index.isin(test.index)]"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Remove test from data and store it in train",
            "user": "u6"
          },
          {
            "query": "subtract test dataframe from data",
            "user": "u21"
          },
          {
            "query": "sub() test dataframe from data dataframe",
            "user": "u21"
          },
          {
            "query": "remove test from data",
            "user": "u21"
          },
          {
            "query": "Remove row from data which is in test",
            "user": "u13"
          },
          {
            "query": "Choose row from 'data' which is not in 'test'",
            "user": "u13"
          },
          {
            "query": "Remove dataframe test from dataframe data",
            "user": "u15"
          },
          {
            "query": "subtract table 'test' from table 'data' and store in 'train'",
            "user": "u0"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'inp2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1}, 'inp3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0}, 'target': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2}})",
              "pd.DataFrame({'inp1': {6: 0}, 'inp2': {6: 1}, 'inp3': {6: 6.0}, 'target': {6: 2}})"
            ],
            "output": "pd.DataFrame({'inp1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1}, 'inp2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0}, 'inp3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5}, 'target': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          },
          {
            "inputs": [
              "pd.DataFrame({'inp1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'inp2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'inp3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'target': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
              "pd.DataFrame({'inp1': {2: 2, 9: -2}, 'inp2': {2: 2, 9: 5}, 'inp3': {2: 1.5, 9: 30.0}, 'target': {2: 1, 9: 1}})"
            ],
            "output": "pd.DataFrame({'inp1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8}, 'inp2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1}, 'inp3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0}, 'target': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          }
        ],
        "solutions": [
          "train = data.drop(test.index)",
          "train = data[~data.index.isin(test.index)]",
          "train = data.loc[~data.index.isin(test.index)]"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Drop rows in data that also exist in test",
            "user": "u9"
          },
          {
            "query": "Filter indexes in data that are in test",
            "user": "u9"
          },
          {
            "query": "Filter indexes in data that are not in test",
            "user": "u9"
          },
          {
            "query": "Keep indexes in data that are not in test",
            "user": "u9"
          },
          {
            "query": "Filter rows in data that are not in test",
            "user": "u9"
          },
          {
            "query": "Keep rows in data that are not in test",
            "user": "u9"
          },
          {
            "query": "Keep rows in df named data that are not in df named test",
            "user": "u9"
          },
          {
            "query": "Drop rows in df named data that are in df named test",
            "user": "u9"
          },
          {
            "query": "Drop rows in df data that are in df test",
            "user": "u9"
          },
          {
            "query": "Drop rows in df named data whose index is in df named test",
            "user": "u9"
          },
          {
            "query": "Given data and test, return all rows in data which are not in test",
            "user": "u18"
          },
          {
            "query": "Given dataframes data and test, return all rows in data which are not in test",
            "user": "u18"
          },
          {
            "query": "Given dataframes data and test, select all rows in data which are not in test",
            "user": "u18"
          },
          {
            "query": "Given dataframes data and test, select all rows in data which are not present in test",
            "user": "u18"
          },
          {
            "query": "Given dataframes data and test, return the difference of data and test",
            "user": "u18"
          },
          {
            "query": "Remove test values from data",
            "user": "u2"
          },
          {
            "query": "Remove 'test' values from 'data'",
            "user": "u2"
          },
          {
            "query": "create 'train' data by removing 'test' from 'data'",
            "user": "u2"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'feat2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1}, 'feat3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0}, 'labels': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2}})",
              "pd.DataFrame({'feat1': {6: 0, 2: 2}, 'feat2': {6: 1, 2: 2}, 'feat3': {6: 6.0, 2: 1.5}, 'labels': {6: 2, 2: 1}})"
            ],
            "output": "pd.DataFrame({'feat1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1}, 'feat2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0}, 'feat3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5}, 'labels': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          },
          {
            "inputs": [
              "pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'feat2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'feat3': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'labels': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
              "pd.DataFrame({'feat1': {2: 2, 9: -2, 6: 0}, 'feat2': {2: 2, 9: 5, 6: 1}, 'feat3': {2: 1.5, 9: 30.0, 6: 6.0}, 'labels': {2: 1, 9: 1, 6: 2}})"
            ],
            "output": "pd.DataFrame({'feat1': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1, 7: 2, 8: 8}, 'feat2': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0, 7: 5, 8: -1}, 'feat3': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5, 7: 12.0, 8: 8.0}, 'labels': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1, 7: 2, 8: 3}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          }
        ],
        "solutions": [
          "train = data.drop(test.index)",
          "train = data[~data.index.isin(test.index)]",
          "train = data.loc[~data.index.isin(test.index)]"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "in 'data', remove the rows that are present in 'test'",
            "user": "u5"
          },
          {
            "query": "remove similar rows between dataframe 'data' and dataframe 'test'",
            "user": "u19"
          },
          {
            "query": "Subtract test from data",
            "user": "u16"
          },
          {
            "query": "remove 'train' from 'data'",
            "user": "u3"
          },
          {
            "query": "remove rows in 'train' from 'data'",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'inputB': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1}, 'inputC': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0}, 'GoldTarget': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2}})",
              "pd.DataFrame({'inputA': {6: 0}, 'inputB': {6: 1}, 'inputC': {6: 6.0}, 'GoldTarget': {6: 2}})"
            ],
            "output": "pd.DataFrame({'inputA': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1}, 'inputB': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0}, 'inputC': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5}, 'GoldTarget': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          },
          {
            "inputs": [
              "pd.DataFrame({'inputA': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'inputB': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'inputC': {0: 0.0, 1: 7.5, 2: 1.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'GoldTarget': {0: 0, 1: 2, 2: 1, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
              "pd.DataFrame({'inputA': {2: 2}, 'inputB': {2: 2}, 'inputC': {2: 1.5}, 'GoldTarget': {2: 1}})"
            ],
            "output": "pd.DataFrame({'inputA': {0: 1, 1: 1, 3: 0, 4: 0, 5: 1, 6: 0, 7: 2, 8: 8, 9: -2}, 'inputB': {0: 0, 1: 0, 3: 1, 4: 1, 5: 0, 6: 1, 7: 5, 8: -1, 9: 5}, 'inputC': {0: 0.0, 1: 7.5, 3: 3.0, 4: 6.0, 5: 4.5, 6: 6.0, 7: 12.0, 8: 8.0, 9: 30.0}, 'GoldTarget': {0: 0, 1: 2, 3: 1, 4: 0, 5: 1, 6: 2, 7: 2, 8: 3, 9: 1}})",
            "invars": [
              "data",
              "test"
            ],
            "outvar": "train"
          }
        ],
        "solutions": [
          "train = data.drop(test.index)",
          "train = data[~data.index.isin(test.index)]",
          "train = data.loc[~data.index.isin(test.index)]"
        ]
      }
    }
  },
  "20": {
    "sets": {
      "B": {
        "queries": [
          {
            "query": "Get the argmax of the first 3 columns for each row and assign it to a new column 'Pred'",
            "user": "u1"
          },
          {
            "query": "Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'",
            "user": "u1"
          },
          {
            "query": "Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'",
            "user": "u1"
          },
          {
            "query": "Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2",
            "user": "u1"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'Label': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})"
            ],
            "output": "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'Label': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}, 'Pred': {0: 1, 1: 0, 2: 0, 3: 2, 4: 2, 5: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['Pred'] = dfin.iloc[:,:3].idxmax(1)",
          "dfin['Pred'] = dfin[[0,1,2]].idxmax(1)",
          "dfin['Pred'] = dfin.loc[:,[0,1,2]].idxmax(1)"
        ]
      },
      "C": {
        "queries": [
          {
            "query": "find maximum value of first three columns of row and add its column name to a new column \"output\"",
            "user": "u4"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'goldLabel': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})"
            ],
            "output": "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'goldLabel': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}, 'output': {0: 1, 1: 0, 2: 0, 3: 2, 4: 2, 5: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['output'] = dfin.iloc[:,:3].idxmax(1)",
          "dfin['output'] = dfin[[0,1,2]].idxmax(1)",
          "dfin['output'] = dfin.loc[:,[0,1,2]].idxmax(1)"
        ]
      },
      "D": {
        "queries": [
          {
            "query": "Get maximum value of rows and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get maximum value of rows without column 'target' and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get maximum columns 0, 1, 2, 3, and 4 and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'",
            "user": "u6"
          },
          {
            "query": "Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin",
            "user": "u6"
          },
          {
            "query": "Choose name of column with highest value in first five columns of row in prediction column",
            "user": "u13"
          },
          {
            "query": "Choose name of column with highest value in first five columns of row and create prediction column",
            "user": "u13"
          },
          {
            "query": "Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'",
            "user": "u15"
          },
          {
            "query": "Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'",
            "user": "u15"
          },
          {
            "query": "Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'",
            "user": "u15"
          },
          {
            "query": "Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction",
            "user": "u15"
          },
          {
            "query": "Get the index of maximum value among first five columns and store it as column name prediction",
            "user": "u15"
          },
          {
            "query": "Create new column 'prediction' in dfin and set its value to the index with maximum value among columns 0, 1, 2, 3 and 4",
            "user": "u15"
          },
          {
            "query": "Create new column 'prediction' in dfin and set its value to the index with maximum value among first five columns",
            "user": "u15"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 3: {0: 0.4, 1: 0.4, 2: 0.4, 3: 0.4, 4: 0.04, 5: 0.8}, 4: {0: 0.9, 1: 0.9, 2: 0.9, 3: 0.1, 4: 0.36, 5: 0.9}, 'target': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})"
            ],
            "output": "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 3: {0: 0.4, 1: 0.4, 2: 0.4, 3: 0.4, 4: 0.04, 5: 0.8}, 4: {0: 0.9, 1: 0.9, 2: 0.9, 3: 0.1, 4: 0.36, 5: 0.9}, 'target': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}, 'prediction': {0: 4, 1: 4, 2: 0, 3: 2, 4: 2, 5: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['prediction'] = dfin.iloc[:,:5].idxmax(1)",
          "dfin['prediction'] = dfin[[0,1,2,3,4]].idxmax(1)",
          "dfin['prediction'] = dfin.loc[:,[0,1,2,3,4]].idxmax(1)"
        ]
      },
      "A": {
        "queries": [
          {
            "query": "Create a new columns called 'pred' with the column name containing max of first 3 columns",
            "user": "u9"
          },
          {
            "query": "In each row, find argmax of first 3 columns and assign it to 'pred'",
            "user": "u9"
          },
          {
            "query": "In each row, find argmax of first 3 columns. Store in new column called 'pred'",
            "user": "u9"
          },
          {
            "query": "In each row of dfin, find argmax of first 3 columns and assign it to 'pred'",
            "user": "u9"
          },
          {
            "query": "In each row, find argmax of first three values and assign it to 'pred'",
            "user": "u9"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'labels': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})"
            ],
            "output": "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 'labels': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}, 'pred': {0: 1, 1: 0, 2: 0, 3: 2, 4: 2, 5: 1}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['pred'] = dfin.iloc[:,:3].idxmax(1)",
          "dfin['pred'] = dfin[[0,1,2]].idxmax(1)",
          "dfin['pred'] = dfin.loc[:,[0,1,2]].idxmax(1)"
        ]
      },
      "E": {
        "queries": [
          {
            "query": "select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'",
            "user": "u3"
          },
          {
            "query": "select index of maximum value from first five columns and assign to 'OurPred'",
            "user": "u3"
          }
        ],
        "ios": [
          {
            "inputs": [
              "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 3: {0: 0.4, 1: 0.4, 2: 0.4, 3: 0.4, 4: 0.04, 5: 0.8}, 4: {0: 0.9, 1: 0.9, 2: 0.9, 3: 0.1, 4: 0.36, 5: 0.9}, 'GoldTarget': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})"
            ],
            "output": "pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5: 0.88}, 2: {0: 0.1, 1: 0.2, 2: 0.0, 3: 0.7, 4: 0.37, 5: 0.01}, 3: {0: 0.4, 1: 0.4, 2: 0.4, 3: 0.4, 4: 0.04, 5: 0.8}, 4: {0: 0.9, 1: 0.9, 2: 0.9, 3: 0.1, 4: 0.36, 5: 0.9}, 'GoldTarget': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}, 'OurPred': {0: 4, 1: 4, 2: 0, 3: 2, 4: 2, 5: 4}})",
            "invars": [
              "dfin"
            ],
            "outvar": "dfin"
          }
        ],
        "solutions": [
          "dfin['OurPred'] = dfin.iloc[:,:5].idxmax(1)",
          "dfin['OurPred'] = dfin[[0,1,2,3,4]].idxmax(1)",
          "dfin['OurPred'] = dfin.loc[:,[0,1,2,3,4]].idxmax(1)"
        ]
      }
    }
  }
}
